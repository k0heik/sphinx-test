Search.setIndex({"docnames": ["bid_optimisation_ml/common_module/common_module", "bid_optimisation_ml/common_module/common_module.bigquery_util", "bid_optimisation_ml/common_module/common_module.custom_logger", "bid_optimisation_ml/common_module/common_module.tests", "bid_optimisation_ml/common_module/modules", "bid_optimisation_ml/cpc_prediction/main", "bid_optimisation_ml/cpc_prediction/modules", "bid_optimisation_ml/cvr_prediction/main", "bid_optimisation_ml/cvr_prediction/modules", "bid_optimisation_ml/modules", "bid_optimisation_ml/sophia-ai/modules", "bid_optimisation_ml/sophia-ai/spai", "bid_optimisation_ml/sophia-ai/spai.ai", "bid_optimisation_ml/sophia-ai/spai.ai.boosting", "bid_optimisation_ml/sophia-ai/spai.ai.preprocess", "bid_optimisation_ml/sophia-ai/spai.optim", "bid_optimisation_ml/sophia-ai/spai.service", "bid_optimisation_ml/sophia-ai/spai.service.bid", "bid_optimisation_ml/sophia-ai/spai.service.cap", "bid_optimisation_ml/sophia-ai/spai.service.cpc", "bid_optimisation_ml/sophia-ai/spai.service.cvr", "bid_optimisation_ml/sophia-ai/spai.service.pid", "bid_optimisation_ml/sophia-ai/spai.service.spa", "bid_optimisation_ml/sophia-ai/spai.utils", "bid_optimisation_ml/sophia-ai/spai.utils.kpi", "bid_optimisation_ml/spa_prediction/main", "bid_optimisation_ml/spa_prediction/modules", "index", "old/chap1", "old/chap2", "old/chap2-1", "old/chap3", "specification/bid/main", "specification/budget/daily_budget_cap", "specification/budget/main", "specification/budget/total_budget", "specification/main", "specification/model/cpc_model", "specification/model/cvr_model", "specification/model/main", "specification/model/spa_model"], "filenames": ["bid_optimisation_ml/common_module/common_module.rst", "bid_optimisation_ml/common_module/common_module.bigquery_util.rst", "bid_optimisation_ml/common_module/common_module.custom_logger.rst", "bid_optimisation_ml/common_module/common_module.tests.rst", "bid_optimisation_ml/common_module/modules.rst", "bid_optimisation_ml/cpc_prediction/main.rst", "bid_optimisation_ml/cpc_prediction/modules.rst", "bid_optimisation_ml/cvr_prediction/main.rst", "bid_optimisation_ml/cvr_prediction/modules.rst", "bid_optimisation_ml/modules.md", "bid_optimisation_ml/sophia-ai/modules.rst", "bid_optimisation_ml/sophia-ai/spai.rst", "bid_optimisation_ml/sophia-ai/spai.ai.rst", "bid_optimisation_ml/sophia-ai/spai.ai.boosting.rst", "bid_optimisation_ml/sophia-ai/spai.ai.preprocess.rst", "bid_optimisation_ml/sophia-ai/spai.optim.rst", "bid_optimisation_ml/sophia-ai/spai.service.rst", "bid_optimisation_ml/sophia-ai/spai.service.bid.rst", "bid_optimisation_ml/sophia-ai/spai.service.cap.rst", "bid_optimisation_ml/sophia-ai/spai.service.cpc.rst", "bid_optimisation_ml/sophia-ai/spai.service.cvr.rst", "bid_optimisation_ml/sophia-ai/spai.service.pid.rst", "bid_optimisation_ml/sophia-ai/spai.service.spa.rst", "bid_optimisation_ml/sophia-ai/spai.utils.rst", "bid_optimisation_ml/sophia-ai/spai.utils.kpi.rst", "bid_optimisation_ml/spa_prediction/main.rst", "bid_optimisation_ml/spa_prediction/modules.rst", "index.md", "old/chap1.rst", "old/chap2.rst", "old/chap2-1.rst", "old/chap3.rst", "specification/bid/main.md", "specification/budget/daily_budget_cap.md", "specification/budget/main.md", "specification/budget/total_budget.md", "specification/main.md", "specification/model/cpc_model.md", "specification/model/cvr_model.md", "specification/model/main.md", "specification/model/spa_model.md"], "titles": ["common_module package", "common_module.bigquery_util package", "common_module.custom_logger package", "common_module.tests package", "common_module", "main module", "cpc_prediction", "main module", "cvr_prediction", "bid_optimisation_ml", "sophia-ai", "spai package", "spai.ai package", "spai.ai.boosting package", "spai.ai.preprocess package", "spai.optim package", "spai.service package", "spai.service.bid package", "spai.service.cap package", "spai.service.cpc package", "spai.service.cvr package", "spai.service.pid package", "spai.service.spa package", "spai.utils package", "spai.utils.kpi package", "main module", "spa_prediction", "SophiaAI", "h1 \u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217", "Chapter 2", "Chapter 2-1", "Chapter 3", "\u5165\u672d\u984d\u8abf\u6574", "&lt;no title&gt;", "\u65e5\u4e88\u7b97\u8abf\u6574", "&lt;no title&gt;", "ML\u8981\u4ef6\u5b9a\u7fa9", "CPC\u4e88\u6e2c\u30e2\u30c7\u30eb", "CVR\u4e88\u6e2c\u30e2\u30c7\u30eb", "KPI\u4e88\u6e2c\u30e2\u30c7\u30eb", "SPA\u4e88\u6e2c\u30e2\u30c7\u30eb"], "terms": {"bigquery_util": [0, 4, 9], "bigqueryservic": [0, 4], "cache_dir": [0, 1], "append_from_df": [0, 1], "append_from_json": [0, 1], "append_from_queri": [0, 1], "append_from_query_tpl": [0, 1], "append_gcs_to_bq": [0, 1], "client": [0, 1], "create_t": [0, 1], "create_table_from_df": [0, 1], "delete_partit": [0, 1], "delete_t": [0, 1], "extract_to_df": [0, 1], "extract_to_integer_range_partition_t": [0, 1], "extract_to_s3": [0, 1], "get_df_by_queri": [0, 1], "get_query_job": [0, 1], "query_export_t": [0, 1], "recreate_t": [0, 1], "s3_to_gc": [0, 1], "func": [0, 4], "format_to_bq_schema": [0, 1], "load_output_table_schema": [0, 1], "custom_logg": [0, 4, 9], "init_log": [0, 2], "update_record_factori": [0, 2], "test": [0, 4, 9], "testutil": [0, 4], "create_gcs_bucket": [0, 3], "create_s3_bucket": [0, 3], "delete_all_s3_data": [0, 3], "delete_gcs_bucket": [0, 3], "delete_s3_bucket": [0, 3], "is_execute_extern": [0, 3], "reason_execute_extern": [0, 3], "copy_s3_fil": [0, 4, 9], "source_bucket": 0, "source_kei": 0, "destination_bucket": 0, "destination_kei": 0, "get_s3_file_list": [0, 4, 9], "bucket": [0, 1], "prefix": [0, 20, 22, 24], "get_ssm_paramet": [0, 4, 9], "parameter_nam": 0, "str": [0, 1, 15, 19, 20, 22, 24], "\u6307\u5b9a\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u306e\u5024\u3092ssm\u304b\u3089\u53d6\u5f97\u3057\u3066\u8fd4\u3059\u95a2\u6570": 0, "paramet": [0, 1, 13, 15], "ssm\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u540d": 0, "load_file_list": [0, 4, 9], "read_binary_from_s3": [0, 4, 9], "kei": [0, 1], "\u6307\u5b9a\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b": 0, "param": [0, 12, 13, 14, 16, 19, 20, 22], "\u53d6\u5f97\u5148\u306e\u30d0\u30b1\u30c3\u30c8\u540d": 0, "type": [0, 1, 12, 13, 14, 15], "\u53d6\u5f97\u3059\u308b\u30d1\u30b9": 0, "read_from_s3": [0, 4, 9], "encod": 0, "utf": 0, "8": [0, 1, 15, 17, 19, 20, 22], "dtype": [0, 23], "none": [0, 1, 12, 13, 15, 17, 19, 20, 21, 22, 23, 24], "parse_d": 0, "fals": [0, 1, 13, 15, 19, 20, 22], "datafram": [0, 1, 13, 15, 17, 18, 19, 20, 21, 22, 24], "\u6307\u5b9a\u306e\u30c7\u30fc\u30bf": 0, "csv\u5f62\u5f0f": 0, "\u3092\u53d6\u5f97\u3057\u3066\u6587\u5b57\u5217\u3067\u8fd4\u3059": 0, "read_from_s3_uri": [0, 4, 9], "s3_uri": [0, 1], "s3_client": [0, 3, 4, 9], "s3_resourc": [0, 4, 9], "write_binary_to_s3": [0, 4, 9], "bin": 0, "write_df_to_s3": [0, 4, 9], "df": [0, 1, 15, 17, 18, 19, 20, 21, 22, 23, 24], "index": [0, 13], "header": 0, "true": [0, 15, 19, 20, 22], "\u6307\u5b9a\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092csv\u5f62\u5f0f\u3067s3\u306b\u66f8\u304d\u51fa\u3059": 0, "pand": 0, "\u51fa\u529b\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0": 0, "\u51fa\u529b\u5148\u306e\u30d0\u30b1\u30c3\u30c8\u540d": 0, "\u51fa\u529b\u3059\u308b\u30d1\u30b9": 0, "boolean": 0, "\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u51fa\u529b\u3059\u308b\u304b": 0, "\u30d8\u30c3\u30c0\u30fc\u3092\u51fa\u529b\u3059\u308b\u304b": 0, "write_json_to_s3": [0, 4, 9], "json": 0, "output_distributed_preprocess_manag": [0, 4, 9], "s3_bucket": [0, 1], "gcs_bucket": 0, "bq": 0, "bq_dataset_nam": 0, "bq_table_nam": 0, "max_trial": 0, "10": 0, "base_sleep_sec": 0, "1": [0, 1, 15, 17, 28, 29, 32], "output_preprocess_manag": [0, 4, 9], "s3_kei": [0, 1], "output_preprocess_to_s3_manag": [0, 4, 9], "read_labelencoder_manag": [0, 4, 9], "s3_prefix": 0, "read_s3_manag": [0, 4, 9], "write_latest_labelencoder_manag": [0, 4, 9], "s3_latest_prefix": 0, "write_latest_model_manag": [0, 4, 9], "s3_latest_kei": 0, "business_except": [0, 4, 9], "exception_messag": 0, "logger": [0, 10, 11], "complement_daily_ad": [0, 4, 9], "ad_df": 0, "complement_d": 0, "need_bidding_pric": 0, "complement_bidding_price_nam": 0, "current_bidding_pric": 0, "df\u306e\u6700\u65b0\u65e5\u4ed8\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3044ad\u306e\u30c7\u30fc\u30bf\u3092ad_df\u306e\u30c7\u30fc\u30bf\u304b\u3089\u88dc\u5b8c\u3059\u308b": 0, "\u5b9f\u7e3e\u30c7\u30fc\u30bf\u306edatafram": 0, "\u5bfe\u8c61\u5e83\u544a\u306edatafram": 0, "\u88dc\u5b8c\u5bfe\u8c61\u306e\u65e5\u4ed8": 0, "complement_log": [0, 4, 9], "row": [0, 24], "get_custom_logg": [0, 4, 9, 11, 23], "loggernam": [0, 23], "get_bucket_key_from_s3_uri": [0, 4, 9], "get_s3_kei": [0, 4, 9], "todai": [0, 15, 17, 18, 19, 20, 21, 22, 24], "datetim": [0, 1, 15], "suffix": 0, "get_target_d": [0, 4, 9], "date": [0, 11, 15, 24], "get_target_unit_df": [0, 4, 9], "class": [1, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22], "project_id": 1, "dataset_nam": 1, "base": [1, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22], "object": [1, 12, 13, 15, 17, 18, 19, 20, 21, 22], "tmp": 1, "bid_optimisation_ml": [1, 27], "bq_cach": 1, "table_nam": 1, "destination_dataset_nam": 1, "json_object": 1, "list": [1, 13, 15], "dict": [1, 12, 13, 15, 19, 20, 22], "ani": [1, 12], "schema": 1, "option": [1, 13, 15, 17, 19, 20, 21, 22], "sql": 1, "template_root_dir": 1, "filenam": 1, "gcs_bucket_nam": 1, "gcs\u304b\u3089bigquery\u306b\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30bd\u30c3\u30c9": 1, "\u8ffd\u52a0\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u30ad\u30fc": 1, "properti": [1, 15], "panda": 1, "dataframe\u304b\u3089table\u3092\u65b0\u898f\u4f5c\u6210\u3092\u4e0a\u66f8\u304d\u3067\u4f5c\u6210\u3059\u308b": 1, "key_dat": 1, "from": 1, "user": 1, "admin": 1, "anaconda3": 1, "env": 1, "py38": 1, "lib": 1, "python3": 1, "py": 1, "tabl": 1, "use_cach": 1, "bool": [1, 13, 15, 19, 20, 22], "bq\u306b\u5bfe\u3059\u308bsql\u5b9f\u884c\u7d50\u679c\u3092pd": 1, "dataframe\u3067\u8fd4\u3059": 1, "sql\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea": 1, "sql\u30d5\u30a1\u30a4\u30eb\u540d": 1, "\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u4e0e\u3048\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u8f9e\u66f8": 1, "return": [1, 12, 13, 14, 15], "sql\u5b9f\u884c\u7d50\u679c": 1, "pd": [1, 13], "partition_field": 1, "min_id": 1, "int": [1, 13, 15, 17, 19, 20, 22], "max_id": 1, "interv": 1, "bq\u306b\u5bfe\u3059\u308bsql\u5b9f\u884c\u7d50\u679c\u3092\u30c6\u30fc\u30d6\u30eb\u306b\u51fa\u529b\u3057": 1, "job_id\u3092\u8fd4\u3059": 1, "\u51fa\u529b\u5148\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8": 1, "\u51fa\u529b\u5148\u306e\u30c6\u30fc\u30d6\u30eb": 1, "\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u5217\u540d": 1, "\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3id\u306e\u6700\u5c0f\u5024": 1, "\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3id\u306e\u6700\u5927\u5024": 1, "\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u3092\u5207\u308bid\u306e\u611f\u899a": 1, "callback": 1, "callabl": [1, 17, 19, 20, 21, 22], "bq\u306b\u5bfe\u3059\u308bsql\u5b9f\u884c\u7d50\u679c\u3092s3\u3078\u4fdd\u5b58\u3057pd": 1, "s3": 1, "s3_key\u3068\u540c\u6642\u306b\u6307\u5b9a": 1, "s3_uri\u3068\u6392\u4ed6": 1, "s3_bucket\u3068\u540c\u6642\u306b\u6307\u5b9a": 1, "uri": 1, "\u5358\u72ec\u3067\u6307\u5b9a": 1, "s3_key\u3068\u6392\u4ed6": 1, "s3\u306b\u51fa\u529b\u3059\u308b\u524d\u306bdf\u306b\u5bfe\u3057\u3066\u9069\u7528\u3059\u308b\u95a2\u6570": 1, "bq\u306b\u5bfe\u3057\u3066sql\u3092\u5b9f\u884c\u3057": 1, "\u7d50\u679c\u3092panda": 1, "\u5b9f\u884c\u3059\u308bsql": 1, "job_id": 1, "locat": 1, "asia": 1, "northeast1": 1, "range_start": 1, "0": [1, 13, 15, 17], "range_end": 1, "s3_bucket_nam": 1, "_df": [1, 18, 21, 24], "lognam": 2, "initialis": 2, "app": 2, "log": 2, "kwarg": [2, 12, 13, 19, 20, 22], "updat": 2, "record": 2, "factori": 2, "storage_cli": 3, "bucket_nam": 3, "packag": [4, 9, 10, 27], "subpackag": [4, 9, 10], "submodul": [4, 9, 10, 11, 16], "modul": [4, 6, 8, 9, 10, 26, 27], "content": [4, 9, 10], "aws_util": [4, 9], "const": [4, 9], "datamanage_util": [4, 9], "exception_util": [4, 9], "extract_util": [4, 9], "logger_util": [4, 9], "slack_util": [4, 9], "system_util": [4, 9], "target_unit_util": [4, 9], "main": [6, 8, 9, 26, 27], "sophia": [9, 27], "ai": [9, 11, 27], "spai": [9, 10, 27], "optim": [9, 10, 11], "servic": [9, 10, 11], "util": [9, 10, 11], "common_modul": [9, 27], "cvr_predict": [9, 27], "spa_predict": [9, 27], "cpc_predict": [9, 27], "model": [10, 11, 12, 13], "pid": [10, 11, 16], "pid_util": [10, 11], "dask": [10, 11], "boost": [11, 12], "catboost_wrap": [11, 12], "lgb_wrap": [11, 12], "tune_param": [11, 12], "preprocess": [11, 12, 16], "label_encoder_wrap": [11, 12], "basemlmodel": [11, 12, 13], "fit": [11, 12, 13, 14, 16, 19, 20, 22], "predict": [11, 12, 13, 16, 19, 20, 22], "basemodel": [11, 12, 13, 14], "from_byt": [11, 12, 13, 14], "to_byt": [11, 12, 13, 14], "deseri": [11, 12], "serial": [11, 12], "ad": [11, 15], "delta": [11, 15], "ema_cost": [11, 15], "has_predicted_kpi": [11, 15], "is_valid": [11, 15], "last_bidding_pric": [11, 15], "monthly_convers": [11, 15], "monthly_sal": [11, 15], "valu": [11, 13, 15, 17], "weekly_click": [11, 15], "biddingmlconfig": [11, 15, 16, 17], "bidding_lb_ratio_ov": [11, 15, 16, 17], "bidding_lb_ratio_short": [11, 15, 16, 17], "bidding_ub_ratio_ov": [11, 15, 16, 17], "bidding_ub_ratio_short": [11, 15, 16, 17], "biddingruleconfig": [11, 15, 16, 17], "bidding_price_down_ratio": [11, 15, 16, 17], "bidding_price_up_ratio": [11, 15, 16, 17], "cpc_ratio": [11, 15, 16, 17], "threshold_of_impressions_weekli": [11, 15, 16, 17], "dataforcpc": [11, 15], "click": [11, 15], "cost": [11, 15, 23], "kpi": [11, 15, 23], "cpa": [11, 15, 32], "cpc": [11, 15, 16, 32], "null": [11, 15], "roa": [11, 15, 24, 32], "mode": [11, 15, 23, 24], "budget": [11, 15], "optimisetargetconfig": [11, 15, 16, 17], "threshold_of_clicks_weekli": [11, 15, 16, 17], "threshold_of_cv_monthli": [11, 15, 16, 17], "threshold_of_sales_monthli": [11, 15, 16, 17], "pidconfig": [11, 15], "accelerate_r": [11, 15], "lb_ratio_output": [11, 15], "not_ml_applied_days_threshold": [11, 15], "reduce_r": [11, 15], "sign": [11, 15], "th_ratio_acceler": [11, 15], "th_ratio_reduce_oscil": [11, 15], "ub_ratio_output": [11, 15], "perform": [11, 15], "as_dict": [11, 15], "bidding_pric": [11, 15], "convers": [11, 15], "cvr": [11, 15, 16, 32], "impress": [11, 15], "rpc": [11, 15], "sale": [11, 15], "purpos": [11, 15, 23, 24], "set": [11, 15], "c": [11, 15, 28, 32], "calc_sigma": [11, 15], "calc_v": [11, 15], "calc_weight": [11, 15], "is_optimise_target": [11, 15], "obs_kpi": [11, 15], "state": [11, 15], "error": [11, 15], "kd": [11, 15], "ki": [11, 15], "kp": [11, 15], "original_output": [11, 15], "output": [11, 15, 17, 19, 20, 21, 22], "sum_error": [11, 15], "calc_stat": [11, 15], "isnan": [11, 15], "wma": [11, 15], "calc_bid_cpc_limit": [11, 15], "dict2perf": [11, 15], "dict2qpstat": [11, 15], "dict2set": [11, 15], "estimate_ad_cpc": [11, 15, 16, 17], "clip": [11, 15], "ctr": [11, 15, 32], "ema": [11, 15], "inv_roa": [11, 15], "nan2const": [11, 15], "nan2non": [11, 15], "nan2zero": [11, 15], "none2const": [11, 15], "none2zero": [11, 15], "safe_div": [11, 15, 23, 24], "safe_exp": [11, 15], "weighted_cpc": [11, 15], "weighted_cpc_by_df": [11, 15], "weighted_ma": [11, 15], "weighted_ma_weight": [11, 15], "bid": [11, 16], "calcul": [11, 15, 16], "config": [11, 16], "cap": [11, 16], "estim": [11, 16], "spa": [11, 16], "dask_dataframe_from_panda": [11, 23], "get_dask_cli": [11, 23], "make_meta": [11, 23], "merg": [11, 23], "catboostmodel": [12, 13], "lgbmodel": [12, 13], "log1pmodel": [12, 13, 19, 22], "probmodel": [12, 13, 20], "estimate_fitting_tim": [12, 13], "get_tuned_param": [12, 13], "get_tuned_params_catboost": [12, 13], "get_tuned_params_lgb": [12, 13], "labelencod": [12, 14, 19, 20, 22], "transform": [12, 14, 16, 17, 18, 21], "metaclass": 12, "ml": 12, "attribut": [12, 13], "hyperparamet": [12, 13], "abstract": 12, "x": [12, 13, 15, 24], "y": [12, 13, 15, 24], "weight": [12, 13, 15], "abc": 12, "binari": [12, 13, 14], "byte": [12, 13, 14], "obj": 12, "data": 12, "an": [12, 15], "can": 12, "arg": [13, 19, 20, 21, 22], "catboost": 13, "regress": 13, "wrapper": 13, "union": [13, 15], "ndarrai": [13, 15], "seri": [13, 18, 24], "train": [13, 16, 19, 20, 22], "thi": 13, "w": [13, 15, 17], "np": [13, 15], "classmethod": [13, 14], "binary\u304b\u3089\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba": 13, "\u30e2\u30c7\u30eb\u306e\u30d0\u30a4\u30ca\u30ea": [13, 14], "\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u30e2\u30c7\u30eb": [13, 14], "pred": 13, "binary\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba": [13, 14], "rtype": [13, 14], "xentropi": 13, "trn_x": 13, "trn_y": 13, "val_x": 13, "val_i": 13, "trn_w": 13, "val_w": 13, "modelclass": 13, "cat_featur": 13, "validation_ratio": 13, "float": [13, 15, 17], "3": [13, 15], "validation_dai": 13, "7": [13, 15], "num_trial": [13, 19, 20, 22], "100": 13, "has_tim": 13, "time": 13, "tune": 13, "hyper": 13, "optuna": 13, "you": 13, "want": 13, "whose": 13, "column": [13, 24], "i": 13, "categor": 13, "featur": 13, "default": 13, "number": 13, "trial": 13, "find": 13, "best": 13, "lr": 13, "01": [13, 15], "data_list": 14, "\u6b20\u640d\u5024\u7528\u306bunknown\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u3066\u304b\u3089fit\u3059\u308b": 14, "binary\u304b\u3089\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30bao": 14, "\u6b20\u640d\u5024\u306funknown\u306b\u5909\u63db\u3057\u3066\u304b\u3089transform\u3059\u308b": 14, "ad_typ": [15, 24], "ad_id": [15, 20, 22, 24], "today_df": 15, "span": 15, "2": [15, 17], "50": [15, 17, 19, 20, 22], "9": [15, 17], "enum": 15, "enumer": 15, "4": 15, "05": 15, "5": 15, "6666666666666666": 15, "A": 15, "control": 15, "base_target_cost": 15, "target_cost": [15, 23, 24], "yesterday_kpi": 15, "not_ml_applied_dai": 15, "target_kpi_valu": [15, 23, 24], "ad_unit_weekly_cpc": 15, "p": [15, 28, 32], "\u6700\u9069\u5316\u76ee\u7684\u3068kpi\u306e\u5b9f\u7e3e\u5024\u304b\u3089pid\u5236\u5fa1\u306b\u3088\u308b\u5165\u672d\u984d\u8abf\u6574\u5bfe\u8c61\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3092\u884c\u3046": 15, "pid\u5236\u5fa1\u306b\u3088\u308b\u5165\u672d\u984d\u8abf\u6574\u3092\u9069\u7528\u3059\u308b": 15, "\u8db3\u5207\u308a\u3092\u884c\u308f\u306a\u3044": 15, "pid\u5236\u5fa1\u306b\u3088\u308b\u5165\u672d\u984d\u8abf\u6574\u3092\u9069\u7528\u3057\u306a\u3044": 15, "\u8db3\u5207\u308a\u3092\u884c\u3046": 15, "nonetyp": 15, "1e": 15, "06": 15, "campaign_all_actual_df": [15, 17, 18, 21], "pid_config": 15, "tupl": 15, "q\u306e\u521d\u671f\u5316\u304a\u3088\u3073\u66f4\u65b0\u3092\u884c\u3046": 15, "historical_performances\u306f": 15, "\u6708\u5185\u306e\u5168\u3066\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u542b\u3080\u3053\u3068": 15, "lst": 15, "ad_historical_perform": 15, "unit_period_cpc": 15, "d": 15, "lower": 15, "upper": 15, "minimum": 15, "maximum": 15, "alt_denom_p": 15, "zero_denom": 15, "seq": 15, "alt_num_p": 15, "daily_actual_df": 15, "target_d": 15, "datetime64": 15, "window_s": 15, "move": 15, "averag": 15, "given": 15, "1d": 15, "arrai": 15, "The": 15, "size": 15, "window": 15, "note": 15, "min_period": [15, 24], "bidcalcul": [16, 17], "calc": [16, 17, 18, 21], "get_kpi": [16, 17], "get_purpos": [16, 17], "bidpreprocessor": [16, 17], "bidcalculationservic": [16, 17], "capcalcul": [16, 18], "cappreprocessor": [16, 18], "to_purpos": [16, 18], "capcalculationservic": [16, 18], "cpcestim": [16, 19], "cpcmodel": [16, 19], "cpcpreprocessor": [16, 19], "add_catcod": [16, 19, 20, 22], "agg": [16, 19, 20, 22], "get_dtyp": [16, 19, 20, 22], "set_unit_id": [16, 19, 20, 22], "cpcpredictionservic": [16, 19], "cvrestim": [16, 20], "cvrmodel": [16, 20], "cvrpreprocessor": [16, 20], "kpi_diff": [16, 20, 22], "merge_query_df": [16, 20, 22], "merge_query_feat": [16, 20, 22], "cvrpredictionservic": [16, 20], "pidcalcul": [16, 21], "map_pid_calc": [16, 21], "pidpreprocessor": [16, 21], "pidcalculationservic": [16, 21], "spaestim": [16, 22], "spamodel": [16, 22], "spapreprocessor": [16, 22], "spapredictionservic": [16, 22], "bidding_algorithm": 17, "historical_ad_df": 17, "advertising_account_id": 17, "portfolio_id": 17, "preprocessor": [17, 18, 19, 20, 21, 22], "daily_df": 18, "_daily_df": 18, "model_writ": [19, 20, 22], "model_read": [19, 20, 22], "is_tun": [19, 20, 22], "label_encoder_writ": [19, 20, 22], "label_encoder_read": [19, 20, 22], "batch_siz": [19, 20, 22], "is_use_dask": [19, 20, 22], "is_train": [19, 20, 22], "df_placement": 19, "output_dtyp": [19, 20, 22], "df_queri": [20, 22], "freq": [20, 22, 24], "7d": [20, 22], "weekli": [20, 22], "key_column": [20, 22, 24], "\u30af\u30a8\u30ea\u7528\u306e\u7279\u5fb4\u91cf\u306e\u8a08\u7b97": [20, 22], "remaining_dai": [23, 24], "used_cost": [23, 24], "adjust_roas_target": [23, 24], "agg_feat": [23, 24], "calc_kpi": [23, 24], "calc_lag": [23, 24], "calc_mean": [23, 24], "calc_placement_kpi": [23, 24], "calc_unit_weekly_cpc_for_cap": [23, 24], "ewm": [23, 24], "feat_column_nam": [23, 24], "get_c": [23, 24], "merge_agg_feat": [23, 24], "merge_cutoff_feat": [23, 24], "merge_feat": [23, 24], "target_kpi": [23, 24], "npartit": 23, "df_left": 23, "df_right": 23, "how": 23, "date_column": 24, "monthly_coefficient_df": 24, "tkpi": 24, "tkpi_valu": 24, "percent": 24, "ratio": 24, "onli": 24, "method": 24, "feature_column": 24, "dai": 24, "14": 24, "col_name_format": 24, "placement_df": 24, "campaign_id": 24, "grp_df": 24, "halflif": 24, "agg_query_feature_col": 24, "date_col": 24, "agg_field": 24, "\u8db3\u5207\u308a\u7528\u306e\u7279\u5fb4\u91cf\u306e\u8a08\u7b97": 24, "feat": 24, "ml\u8981\u4ef6\u5b9a\u7fa9": 27, "\u5165\u672d\u984d\u8abf\u6574": [27, 36], "\u80cc\u666f": 27, "\u524d\u63d0\u6761\u4ef6": 27, "\u5165\u672d\u984d\u8abf\u6574\u306e\u6a5f\u68b0\u5b66\u7fd2\u5316\u65b9\u91dd": 27, "kpi\u4e88\u6e2c\u30e2\u30c7\u30eb": [27, 36], "cpc\u4e88\u6e2c\u30e2\u30c7\u30eb": [27, 39], "cvr\u4e88\u6e2c\u30e2\u30c7\u30eb": [27, 39], "spa\u4e88\u6e2c\u30e2\u30c7\u30eb": [27, 39], "\u65e5\u4e88\u7b97\u8abf\u6574": [27, 36], "h1": 27, "\u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217": 27, "h2": 27, "h3": 27, "b": 28, "aa": 28, "\u76ee\u7684": [28, 32], "kpi\u5236\u7d04\u6761\u4ef6": [28, 32], "v_i": [28, 32], "\u6700\u9069\u5165\u672d\u984d": [28, 32], "click\u6700\u5927\u5316": [28, 32], "\u4e88\u7b97\u306e\u307f": [28, 32], "cpc_i": [28, 32], "bid_i": [28, 32], "\u3053\u308c\u306f": [29, 30, 31], "chap2": [29, 30], "rst": [29, 30, 31], "\u306e\u5185\u5bb9\u3067\u3059": [29, 30, 31], "chap3": 31, "googl": 32, "yahoo\u306e\u691c\u7d22\u5e83\u544a\u3084amazon\u306e\u30b9\u30dd\u30f3\u30b5\u30fc\u30d7\u30ed\u30c0\u30af\u30c8\u5e83\u544a\u306e\u904b\u7528\u3067\u306f": 32, "\u5e83\u544a\u3084\u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u7d10\u3065\u304f": 32, "\u5165\u672d\u984d\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067": 32, "\u4e88\u7b97\u6d88\u5316\u3092\u307e\u3082\u308a\u3064\u3064cpc\u306a\u3069\u306ekpi\u5236\u7d04\u3092\u5b88\u3063\u305f\u5e83\u544a\u904b\u7528\u304c\u6c42\u3081\u3089\u308c\u3066\u3044\u308b": 32, "\u3057\u304b\u3057": 32, "\u5bfe\u8c61\u3068\u306a\u308b\u5e83\u544a\u6570\u306f\u975e\u5e38\u306b\u591a\u304f": 32, "\u904e\u53bb\u306e\u5b9f\u7e3e\u30c7\u30fc\u30bf\u306b\u5fdc\u3058\u3066\u65e5\u3005\u8abf\u6574\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081": 32, "\u4eba\u624b\u306b\u3088\u308b\u904b\u7528\u306f\u30b3\u30b9\u30c8\u304c\u9ad8\u3044": 32, "\u305d\u3053\u3067": 32, "\u3053\u308c\u307e\u3067\u306e\u53d6\u308a\u7d44\u307f\u3067\u306f": 32, "\u5165\u672d\u984d\u8abf\u6574\u306e\u30ed\u30b8\u30c3\u30af\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3067": 32, "\u65e5\u3005\u306e\u5165\u672d\u984d\u8abf\u6574\u306e\u81ea\u52d5\u5316\u306b\u53d6\u308a\u7d44\u3093\u3067\u304d\u305f": 32, "\u30ed\u30b8\u30c3\u30af\u30d9\u30fc\u30b9\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f": 32, "\u3042\u304f\u307e\u3067\u30eb\u30fc\u30eb\u30d9\u30fc\u30b9\u306a\u306e\u3067": 32, "\u5165\u672d\u984d\u306e\u7406\u8ad6\u7684\u306a\u6700\u9069\u6027\u3092\u4fdd\u8a3c\u3067\u304d\u3066\u3044\u306a\u3044": 32, "\u3053\u306e\u305f\u3081": 32, "\u904e\u53bb\u306e\u5b9f\u7e3e\u30c7\u30fc\u30bf\u304b\u3089\u30c8\u30ec\u30f3\u30c9\u3092\u898b\u3064\u3051\u51fa\u3057\u305f\u308a\u3068": 32, "\u904e\u53bb\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u304f\u30ca\u30ec\u30c3\u30b8\u3092\u5c06\u6765\u306e\u5165\u672d\u984d\u8abf\u6574\u306b\u6d3b\u304b\u3059\u3053\u3068\u304c\u96e3\u3057\u3044\u8ab2\u984c\u304c\u3042\u308b": 32, "\u3088\u308a\u6700\u9069\u306a\u5165\u672d\u6226\u7565\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b": 32, "\u30ed\u30b8\u30c3\u30af\u306e\u6a5f\u68b0\u5b66\u7fd2\u5316\u3092\u9032\u3081\u305f\u3044": 32, "spa\u306f\u5e83\u544a\u3054\u3068\u306b\u63a8\u5b9a\u3059\u308b": 32, "pid\u5236\u5fa1\u306e\u5236\u5fa1\u4fe1\u53f7p": 32, "q\u306f\u30e6\u30cb\u30c3\u30c8\u5358\u4f4d": 32, "\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa": 32, "\u5e83\u544a\u30a2\u30ab\u30a6\u30f3\u30c8": 32, "\u3054\u3068\u306b\u8a08\u7b97\u3059\u308b": 32, "\u6a5f\u68b0\u5b66\u7fd2\u306e\u5165\u672d\u984d\u8abf\u6574\u3067\u306f\u5165\u672d\u984d\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u3084": 32, "\u5546\u54c1\u30bf\u30fc\u30b2\u30c6\u30a3\u30f3\u30b0": 32, "\u30aa\u30fc\u30c8\u30bf\u30fc\u30b2\u30c6\u30a3\u30f3\u30b0\u306e\u3088\u3046\u306b": 32, "\u5e83\u544a\u5358\u4f4d\u306b\u8a08\u7b97\u3059\u308b": 32, "\u5e83\u544a\u30b0\u30eb\u30fc\u30d7\u306e\u5165\u672d\u984d\u306f\u8a08\u7b97\u3057\u306a\u3044": 32, "\u5165\u672d\u984d\u8abf\u6574\u306e\u76ee\u6a19\u53ca\u3073": 32, "\u76ee\u6a19kpi\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u4ee5\u4e0b\u306e\u307f\u3092\u60f3\u5b9a": 32, "\u305f\u3060\u3057\u4ee5\u4e0b\u306fc": 32, "flow\u306e\u5236\u7d04\u3067\u6280\u8853\u7684\u306b\u306f\u4ed6\u306e\u7d44\u307f\u5408\u308f\u305b\u3082\u53ef\u80fd": 32, "\u76ee\u6a19sale": 32, "\u76ee\u6a19kpi": 32, "\u76ee\u6a19convers": 32, "\u76ee\u6a19click": 32, "\u4e0a\u8a18\u4ee5\u5916\u306e\u7d44\u307f\u5408\u308f\u305b": 32, "\u305f\u3068\u3048\u3070": 32, "cpc\u6700\u5927\u5316\u3092\u76ee\u6307\u3057\u3064\u3064": 32, "roas\u3092kpi\u76ee\u6a19\u3068\u3057\u3066\u7f6e\u304f\u3088\u3046\u306a\u904b\u7528\u306f\u8003\u3048\u306a\u3044": 32, "\u5165\u672d\u984d\u8abf\u6574\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u308b\u5e83\u544a\u306f": 32, "flow\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308binput": 32, "json\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5e83\u544a\u3092\u5bfe\u8c61\u3068\u3059\u308b": 32, "\u5177\u4f53\u7684\u306a\u30ed\u30b8\u30c3\u30af\u306f\u4ee5\u4e0b\u53c2\u7167": 32, "xx": 32, "\u5165\u672d\u984d\u8abf\u6574\u3067\u306f\u4ee5\u4e0b\u306e\u5f0f\u306b\u5f93\u3063\u3066": 32, "\u5165\u672d\u984d\u3092\u8abf\u6574\u3059\u308b": 32, "q": 32, "\u305f\u3060\u3057": 32, "\u306f\u5e83\u544a\u306e\u4fa1\u5024": 32, "c\u306fcpc": 32, "roas\u306a\u3069\u306e\u52b9\u7387\u76ee\u6a19": 32, "q\u306f\u4e88\u7b97\u3084\u52b9\u7387\u306e\u9032\u6357\u306b\u5fdc\u3058\u3066\u5909\u5316\u3055\u305b\u308b\u5236\u5fa1\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b": 32, "\u3059\u306a\u308f\u3061": 32, "\u672c\u5165\u672d\u6226\u7565\u3067\u306f": 32, "\u5e83\u544a\u4fa1\u5024\u304c\u9ad8\u3044\u5e83\u544a\u306e\u5165\u672d\u984d\u3092\u3042\u3052": 32, "\u4f4e\u3044\u5e83\u544a\u306e\u5165\u672d\u984d\u3092\u4e0b\u3052\u308b\u3068\u3044\u3046\u30b7\u30f3\u30d7\u30eb\u306a\u6226\u7565\u306b\u57fa\u3065\u3044\u3066\u3044\u308b": 32, "v_i\u3084c\u306f": 32, "\u6700\u9069\u5316\u306e\u76ee\u7684\u3084\u5236\u7d04\u6761\u4ef6\u306b\u3088\u3063\u3066\u5909\u5316\u3059\u308b": 32, "\u5bfe\u5fdc\u8868\u306f\u4ee5\u4e0b\u306e\u8868\u3092\u53c2\u7167": 32, "p\u306f\u5e83\u544a\u8cbb\u7528\u306b\u95a2\u308f\u308b\u30d1\u30e9\u30e1\u30fc\u30bf": 32, "q\u306fkpi\u306b\u95a2\u308f\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b": 32, "\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5236\u5fa1\u3068\u5165\u672d\u984d\u306e\u5909\u5316\u306f\u4ee5\u4e0b\u306e\u901a\u308a": 32}, "objects": {"": [[0, 0, 0, "-", "common_module"], [25, 0, 0, "-", "main"], [11, 0, 0, "-", "spai"]], "common_module": [[0, 0, 0, "-", "aws_util"], [1, 0, 0, "-", "bigquery_util"], [0, 0, 0, "-", "const"], [2, 0, 0, "-", "custom_logger"], [0, 0, 0, "-", "datamanage_util"], [0, 0, 0, "-", "exception_util"], [0, 0, 0, "-", "extract_util"], [0, 0, 0, "-", "logger_util"], [0, 0, 0, "-", "system_util"], [0, 0, 0, "-", "target_unit_util"], [3, 0, 0, "-", "tests"]], "common_module.aws_util": [[0, 1, 1, "", "copy_s3_file"], [0, 1, 1, "", "get_s3_file_list"], [0, 1, 1, "", "get_ssm_parameter"], [0, 1, 1, "", "load_file_list"], [0, 1, 1, "", "read_binary_from_s3"], [0, 1, 1, "", "read_from_s3"], [0, 1, 1, "", "read_from_s3_uri"], [0, 1, 1, "", "s3_client"], [0, 1, 1, "", "s3_resource"], [0, 1, 1, "", "write_binary_to_s3"], [0, 1, 1, "", "write_df_to_s3"], [0, 1, 1, "", "write_json_to_s3"]], "common_module.bigquery_util": [[1, 0, 0, "-", "bigqueryservice"], [1, 0, 0, "-", "funcs"]], "common_module.bigquery_util.bigqueryservice": [[1, 2, 1, "", "BigQueryService"]], "common_module.bigquery_util.bigqueryservice.BigQueryService": [[1, 3, 1, "", "CACHE_DIR"], [1, 4, 1, "", "append_from_df"], [1, 4, 1, "", "append_from_json"], [1, 4, 1, "", "append_from_query"], [1, 4, 1, "", "append_from_query_tpl"], [1, 4, 1, "", "append_gcs_to_bq"], [1, 5, 1, "", "client"], [1, 4, 1, "", "create_table"], [1, 4, 1, "", "create_table_from_df"], [1, 4, 1, "", "delete_partition"], [1, 4, 1, "", "delete_table"], [1, 4, 1, "", "extract_to_df"], [1, 4, 1, "", "extract_to_integer_range_partition_table"], [1, 4, 1, "", "extract_to_s3"], [1, 4, 1, "", "get_df_by_query"], [1, 4, 1, "", "get_query_job"], [1, 4, 1, "", "query_export_table"], [1, 4, 1, "", "recreate_table"], [1, 4, 1, "", "s3_to_gcs"]], "common_module.bigquery_util.funcs": [[1, 1, 1, "", "format_to_bq_schema"], [1, 1, 1, "", "load_output_table_schema"]], "common_module.custom_logger": [[2, 0, 0, "-", "custom_logger"]], "common_module.custom_logger.custom_logger": [[2, 1, 1, "", "init_logging"], [2, 1, 1, "", "update_record_factory"]], "common_module.datamanage_util": [[0, 1, 1, "", "output_distributed_preprocess_manager"], [0, 1, 1, "", "output_preprocess_manager"], [0, 1, 1, "", "output_preprocess_to_s3_manager"], [0, 1, 1, "", "read_labelencoder_manager"], [0, 1, 1, "", "read_s3_manager"], [0, 1, 1, "", "write_latest_labelencoder_manager"], [0, 1, 1, "", "write_latest_model_manager"]], "common_module.exception_util": [[0, 1, 1, "", "business_exception"]], "common_module.extract_util": [[0, 1, 1, "", "complement_daily_ad"], [0, 1, 1, "", "complement_log"]], "common_module.logger_util": [[0, 1, 1, "", "get_custom_logger"]], "common_module.system_util": [[0, 1, 1, "", "get_bucket_key_from_s3_uri"], [0, 1, 1, "", "get_s3_key"], [0, 1, 1, "", "get_target_date"]], "common_module.target_unit_util": [[0, 1, 1, "", "get_target_unit_df"]], "common_module.tests": [[3, 0, 0, "-", "testutil"]], "common_module.tests.testutil": [[3, 1, 1, "", "create_gcs_bucket"], [3, 1, 1, "", "create_s3_bucket"], [3, 1, 1, "", "delete_all_s3_data"], [3, 1, 1, "", "delete_gcs_bucket"], [3, 1, 1, "", "delete_s3_bucket"], [3, 1, 1, "", "is_execute_external"], [3, 1, 1, "", "reason_execute_external"]], "spai": [[12, 0, 0, "-", "ai"], [15, 0, 0, "-", "optim"], [16, 0, 0, "-", "service"], [23, 0, 0, "-", "utils"]], "spai.ai": [[12, 0, 0, "-", "base"], [13, 0, 0, "-", "boosting"], [14, 0, 0, "-", "preprocess"], [12, 0, 0, "-", "utils"]], "spai.ai.base": [[12, 2, 1, "", "BaseMLModel"], [12, 2, 1, "", "BaseModel"]], "spai.ai.base.BaseMLModel": [[12, 4, 1, "", "fit"], [12, 4, 1, "", "predict"]], "spai.ai.base.BaseModel": [[12, 4, 1, "", "from_bytes"], [12, 4, 1, "", "to_bytes"]], "spai.ai.boosting": [[13, 0, 0, "-", "catboost_wrap"], [13, 0, 0, "-", "lgb_wrap"], [13, 0, 0, "-", "tune_params"]], "spai.ai.boosting.catboost_wrap": [[13, 2, 1, "", "CatBoostModel"]], "spai.ai.boosting.catboost_wrap.CatBoostModel": [[13, 4, 1, "", "fit"], [13, 4, 1, "", "from_bytes"], [13, 4, 1, "", "predict"], [13, 4, 1, "", "to_bytes"]], "spai.ai.boosting.lgb_wrap": [[13, 2, 1, "", "LGBModel"], [13, 2, 1, "", "Log1pModel"], [13, 2, 1, "", "ProbModel"]], "spai.ai.boosting.lgb_wrap.LGBModel": [[13, 4, 1, "", "fit"], [13, 4, 1, "", "from_bytes"], [13, 3, 1, "", "objective"], [13, 4, 1, "", "predict"], [13, 4, 1, "", "to_bytes"]], "spai.ai.boosting.lgb_wrap.Log1pModel": [[13, 3, 1, "", "objective"], [13, 3, 1, "", "params"]], "spai.ai.boosting.lgb_wrap.ProbModel": [[13, 3, 1, "", "objective"], [13, 3, 1, "", "params"]], "spai.ai.boosting.tune_params": [[13, 1, 1, "", "estimate_fitting_time"], [13, 1, 1, "", "get_tuned_params"], [13, 1, 1, "", "get_tuned_params_catboost"], [13, 1, 1, "", "get_tuned_params_lgb"]], "spai.ai.preprocess": [[14, 0, 0, "-", "label_encoder_wrap"]], "spai.ai.preprocess.label_encoder_wrap": [[14, 2, 1, "", "LabelEncoder"]], "spai.ai.preprocess.label_encoder_wrap.LabelEncoder": [[14, 4, 1, "", "fit"], [14, 4, 1, "", "from_bytes"], [14, 4, 1, "", "to_bytes"], [14, 4, 1, "", "transform"]], "spai.ai.utils": [[12, 1, 1, "", "deserialize"], [12, 1, 1, "", "serialize"]], "spai.optim": [[15, 0, 0, "-", "models"], [15, 0, 0, "-", "pid"], [15, 0, 0, "-", "pid_util"], [15, 0, 0, "-", "utils"]], "spai.optim.models": [[15, 2, 1, "", "Ad"], [15, 2, 1, "", "BiddingMLConfig"], [15, 2, 1, "", "BiddingRuleConfig"], [15, 2, 1, "", "DataForCPC"], [15, 2, 1, "", "KPI"], [15, 2, 1, "", "Mode"], [15, 2, 1, "", "OptimiseTargetConfig"], [15, 2, 1, "", "PIDConfig"], [15, 2, 1, "", "Performance"], [15, 2, 1, "", "Purpose"], [15, 2, 1, "", "Settings"], [15, 2, 1, "", "State"]], "spai.optim.models.Ad": [[15, 4, 1, "", "delta"], [15, 4, 1, "", "ema_cost"], [15, 4, 1, "", "has_predicted_kpi"], [15, 4, 1, "", "is_valid"], [15, 5, 1, "", "last_bidding_price"], [15, 4, 1, "", "monthly_conversion"], [15, 4, 1, "", "monthly_sales"], [15, 4, 1, "", "value"], [15, 4, 1, "", "weekly_clicks"]], "spai.optim.models.BiddingMLConfig": [[15, 3, 1, "", "BIDDING_LB_RATIO_OVER"], [15, 3, 1, "", "BIDDING_LB_RATIO_SHORT"], [15, 3, 1, "", "BIDDING_UB_RATIO_OVER"], [15, 3, 1, "", "BIDDING_UB_RATIO_SHORT"]], "spai.optim.models.BiddingRuleConfig": [[15, 3, 1, "", "BIDDING_PRICE_DOWN_RATIO"], [15, 3, 1, "", "BIDDING_PRICE_UP_RATIO"], [15, 3, 1, "", "CPC_RATIO"], [15, 3, 1, "", "THRESHOLD_OF_IMPRESSIONS_WEEKLY"]], "spai.optim.models.DataForCPC": [[15, 3, 1, "", "clicks"], [15, 3, 1, "", "costs"], [15, 3, 1, "", "date"]], "spai.optim.models.KPI": [[15, 3, 1, "", "CPA"], [15, 3, 1, "", "CPC"], [15, 3, 1, "", "NULL"], [15, 3, 1, "", "ROAS"]], "spai.optim.models.Mode": [[15, 3, 1, "", "BUDGET"], [15, 3, 1, "", "KPI"]], "spai.optim.models.OptimiseTargetConfig": [[15, 3, 1, "", "THRESHOLD_OF_CLICKS_WEEKLY"], [15, 3, 1, "", "THRESHOLD_OF_CV_MONTHLY"], [15, 3, 1, "", "THRESHOLD_OF_SALES_MONTHLY"]], "spai.optim.models.PIDConfig": [[15, 3, 1, "", "accelerate_rate"], [15, 3, 1, "", "lb_ratio_output"], [15, 3, 1, "", "not_ml_applied_days_threshold"], [15, 3, 1, "", "reduce_rate"], [15, 3, 1, "", "sign"], [15, 3, 1, "", "th_ratio_accelerate"], [15, 3, 1, "", "th_ratio_reduce_oscillate"], [15, 3, 1, "", "ub_ratio_output"]], "spai.optim.models.Performance": [[15, 4, 1, "", "as_dict"], [15, 3, 1, "", "bidding_price"], [15, 3, 1, "", "clicks"], [15, 3, 1, "", "conversions"], [15, 3, 1, "", "costs"], [15, 3, 1, "", "cpc"], [15, 3, 1, "", "cvr"], [15, 3, 1, "", "date"], [15, 3, 1, "", "impressions"], [15, 3, 1, "", "rpc"], [15, 3, 1, "", "sales"]], "spai.optim.models.Purpose": [[15, 3, 1, "", "CLICK"], [15, 3, 1, "", "CONVERSION"], [15, 3, 1, "", "SALES"]], "spai.optim.models.Settings": [[15, 5, 1, "", "C"], [15, 4, 1, "", "as_dict"], [15, 4, 1, "", "calc_sigma"], [15, 4, 1, "", "calc_v"], [15, 4, 1, "", "calc_weight"], [15, 4, 1, "", "is_optimise_target"], [15, 4, 1, "", "obs_kpi"]], "spai.optim.models.State": [[15, 4, 1, "", "as_dict"], [15, 3, 1, "", "error"], [15, 3, 1, "", "kd"], [15, 3, 1, "", "ki"], [15, 3, 1, "", "kp"], [15, 3, 1, "", "original_output"], [15, 3, 1, "", "output"], [15, 3, 1, "", "sum_error"]], "spai.optim.pid": [[15, 1, 1, "", "calc_states"], [15, 1, 1, "", "isnan"], [15, 1, 1, "", "wma"]], "spai.optim.pid_util": [[15, 1, 1, "", "calc_bid_cpc_limit"], [15, 1, 1, "", "dict2perf"], [15, 1, 1, "", "dict2qpstates"], [15, 1, 1, "", "dict2settings"], [15, 1, 1, "", "estimate_ad_cpc"]], "spai.optim.utils": [[15, 1, 1, "", "clip"], [15, 1, 1, "", "cpa"], [15, 1, 1, "", "cpc"], [15, 1, 1, "", "ctr"], [15, 1, 1, "", "cvr"], [15, 1, 1, "", "ema"], [15, 1, 1, "", "inv_roas"], [15, 1, 1, "", "nan2const"], [15, 1, 1, "", "nan2none"], [15, 1, 1, "", "nan2zero"], [15, 1, 1, "", "none2const"], [15, 1, 1, "", "none2zero"], [15, 1, 1, "", "roas"], [15, 1, 1, "", "rpc"], [15, 1, 1, "", "safe_div"], [15, 1, 1, "", "safe_exp"], [15, 1, 1, "", "weighted_cpc"], [15, 1, 1, "", "weighted_cpc_by_df"], [15, 1, 1, "", "weighted_ma"], [15, 1, 1, "", "weighted_ma_weight"]], "spai.service": [[17, 0, 0, "-", "bid"], [18, 0, 0, "-", "cap"], [19, 0, 0, "-", "cpc"], [20, 0, 0, "-", "cvr"], [21, 0, 0, "-", "pid"], [22, 0, 0, "-", "spa"]], "spai.service.bid": [[17, 0, 0, "-", "calculator"], [17, 0, 0, "-", "config"], [17, 0, 0, "-", "preprocess"], [17, 0, 0, "-", "service"]], "spai.service.bid.calculator": [[17, 2, 1, "", "BIDCalculator"], [17, 1, 1, "", "estimate_ad_cpc"], [17, 1, 1, "", "get_kpi"], [17, 1, 1, "", "get_purpose"]], "spai.service.bid.calculator.BIDCalculator": [[17, 4, 1, "", "calc"]], "spai.service.bid.config": [[17, 2, 1, "", "BiddingMLConfig"], [17, 2, 1, "", "BiddingRuleConfig"], [17, 2, 1, "", "OptimiseTargetConfig"]], "spai.service.bid.config.BiddingMLConfig": [[17, 3, 1, "", "BIDDING_LB_RATIO_OVER"], [17, 3, 1, "", "BIDDING_LB_RATIO_SHORT"], [17, 3, 1, "", "BIDDING_UB_RATIO_OVER"], [17, 3, 1, "", "BIDDING_UB_RATIO_SHORT"]], "spai.service.bid.config.BiddingRuleConfig": [[17, 3, 1, "", "BIDDING_PRICE_DOWN_RATIO"], [17, 3, 1, "", "BIDDING_PRICE_UP_RATIO"], [17, 3, 1, "", "CPC_RATIO"], [17, 3, 1, "", "THRESHOLD_OF_IMPRESSIONS_WEEKLY"]], "spai.service.bid.config.OptimiseTargetConfig": [[17, 3, 1, "", "THRESHOLD_OF_CLICKS_WEEKLY"], [17, 3, 1, "", "THRESHOLD_OF_CV_MONTHLY"], [17, 3, 1, "", "THRESHOLD_OF_SALES_MONTHLY"]], "spai.service.bid.preprocess": [[17, 2, 1, "", "BIDPreprocessor"]], "spai.service.bid.preprocess.BIDPreprocessor": [[17, 4, 1, "", "transform"]], "spai.service.bid.service": [[17, 2, 1, "", "BIDCalculationService"]], "spai.service.bid.service.BIDCalculationService": [[17, 4, 1, "", "calc"]], "spai.service.cap": [[18, 0, 0, "-", "calculator"], [18, 0, 0, "-", "config"], [18, 0, 0, "-", "preprocess"], [18, 0, 0, "-", "service"]], "spai.service.cap.calculator": [[18, 2, 1, "", "CAPCalculator"]], "spai.service.cap.calculator.CAPCalculator": [[18, 4, 1, "", "calc"]], "spai.service.cap.preprocess": [[18, 2, 1, "", "CAPPreprocessor"], [18, 1, 1, "", "to_purpose"]], "spai.service.cap.preprocess.CAPPreprocessor": [[18, 4, 1, "", "transform"]], "spai.service.cap.service": [[18, 2, 1, "", "CAPCalculationService"]], "spai.service.cap.service.CAPCalculationService": [[18, 4, 1, "", "calc"]], "spai.service.cpc": [[19, 0, 0, "-", "config"], [19, 0, 0, "-", "estimator"], [19, 0, 0, "-", "preprocess"], [19, 0, 0, "-", "service"]], "spai.service.cpc.estimator": [[19, 2, 1, "", "CPCEstimator"], [19, 2, 1, "", "CPCModel"]], "spai.service.cpc.estimator.CPCEstimator": [[19, 4, 1, "", "fit"], [19, 4, 1, "", "predict"]], "spai.service.cpc.estimator.CPCModel": [[19, 3, 1, "", "params"]], "spai.service.cpc.preprocess": [[19, 2, 1, "", "CPCPreprocessor"], [19, 1, 1, "", "agg"], [19, 1, 1, "", "get_dtypes"], [19, 1, 1, "", "set_unit_id"]], "spai.service.cpc.preprocess.CPCPreprocessor": [[19, 4, 1, "", "add_catcodes"], [19, 4, 1, "", "preprocess"]], "spai.service.cpc.service": [[19, 2, 1, "", "CPCPredictionService"]], "spai.service.cpc.service.CPCPredictionService": [[19, 4, 1, "", "predict"], [19, 4, 1, "", "train"]], "spai.service.cvr": [[20, 0, 0, "-", "config"], [20, 0, 0, "-", "estimator"], [20, 0, 0, "-", "preprocess"], [20, 0, 0, "-", "service"]], "spai.service.cvr.estimator": [[20, 2, 1, "", "CVREstimator"], [20, 2, 1, "", "CVRModel"]], "spai.service.cvr.estimator.CVREstimator": [[20, 4, 1, "", "fit"], [20, 4, 1, "", "predict"]], "spai.service.cvr.estimator.CVRModel": [[20, 3, 1, "", "params"]], "spai.service.cvr.preprocess": [[20, 2, 1, "", "CVRPreprocessor"], [20, 1, 1, "", "agg"], [20, 1, 1, "", "get_dtypes"], [20, 1, 1, "", "kpi_diff"], [20, 1, 1, "", "merge_query_df"], [20, 1, 1, "", "merge_query_feats"], [20, 1, 1, "", "set_unit_id"]], "spai.service.cvr.preprocess.CVRPreprocessor": [[20, 4, 1, "", "add_catcodes"], [20, 4, 1, "", "preprocess"]], "spai.service.cvr.service": [[20, 2, 1, "", "CVRPredictionService"]], "spai.service.cvr.service.CVRPredictionService": [[20, 4, 1, "", "predict"], [20, 4, 1, "", "train"]], "spai.service.pid": [[21, 0, 0, "-", "calculator"], [21, 0, 0, "-", "config"], [21, 0, 0, "-", "preprocess"], [21, 0, 0, "-", "service"]], "spai.service.pid.calculator": [[21, 2, 1, "", "PIDCalculator"]], "spai.service.pid.calculator.PIDCalculator": [[21, 4, 1, "", "calc"], [21, 4, 1, "", "map_pid_calc"]], "spai.service.pid.preprocess": [[21, 2, 1, "", "PIDPreprocessor"]], "spai.service.pid.preprocess.PIDPreprocessor": [[21, 4, 1, "", "transform"]], "spai.service.pid.service": [[21, 2, 1, "", "PIDCalculationService"]], "spai.service.pid.service.PIDCalculationService": [[21, 4, 1, "", "calc"]], "spai.service.spa": [[22, 0, 0, "-", "config"], [22, 0, 0, "-", "estimator"], [22, 0, 0, "-", "preprocess"], [22, 0, 0, "-", "service"]], "spai.service.spa.estimator": [[22, 2, 1, "", "SPAEstimator"], [22, 2, 1, "", "SPAModel"]], "spai.service.spa.estimator.SPAEstimator": [[22, 4, 1, "", "fit"], [22, 4, 1, "", "predict"]], "spai.service.spa.estimator.SPAModel": [[22, 3, 1, "", "params"]], "spai.service.spa.preprocess": [[22, 2, 1, "", "SPAPreprocessor"], [22, 1, 1, "", "agg"], [22, 1, 1, "", "get_dtypes"], [22, 1, 1, "", "kpi_diff"], [22, 1, 1, "", "merge_query_df"], [22, 1, 1, "", "merge_query_feats"], [22, 1, 1, "", "set_unit_id"]], "spai.service.spa.preprocess.SPAPreprocessor": [[22, 4, 1, "", "add_catcodes"], [22, 4, 1, "", "preprocess"]], "spai.service.spa.service": [[22, 2, 1, "", "SPAPredictionService"]], "spai.service.spa.service.SPAPredictionService": [[22, 4, 1, "", "predict"], [22, 4, 1, "", "train"]], "spai.utils": [[23, 0, 0, "-", "dask"], [24, 0, 0, "-", "kpi"], [23, 0, 0, "-", "logger"]], "spai.utils.dask": [[23, 1, 1, "", "dask_dataframe_from_pandas"], [23, 1, 1, "", "get_dask_client"], [23, 1, 1, "", "make_meta"], [23, 1, 1, "", "merge"]], "spai.utils.kpi": [[24, 0, 0, "-", "cost"], [24, 0, 0, "-", "kpi"]], "spai.utils.kpi.cost": [[24, 1, 1, "", "remaining_days"], [24, 1, 1, "", "target_cost"], [24, 1, 1, "", "used_cost"]], "spai.utils.kpi.kpi": [[24, 1, 1, "", "adjust_roas_target"], [24, 1, 1, "", "agg_feats"], [24, 1, 1, "", "calc_kpis"], [24, 1, 1, "", "calc_lag"], [24, 1, 1, "", "calc_mean"], [24, 1, 1, "", "calc_placement_kpi"], [24, 1, 1, "", "calc_unit_weekly_cpc_for_cap"], [24, 1, 1, "", "ewm"], [24, 1, 1, "", "feat_column_name"], [24, 1, 1, "", "get_C"], [24, 1, 1, "", "merge_agg_feats"], [24, 1, 1, "", "merge_cutoff_feats"], [24, 1, 1, "", "merge_feats"], [24, 1, 1, "", "mode"], [24, 1, 1, "", "purpose"], [24, 1, 1, "", "safe_div"], [24, 1, 1, "", "target_kpi"], [24, 1, 1, "", "target_kpi_value"]], "spai.utils.logger": [[23, 1, 1, "", "get_custom_logger"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:method", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"]}, "titleterms": {"common_modul": [0, 1, 2, 3, 4], "packag": [0, 1, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "subpackag": [0, 11, 12, 16, 23], "submodul": [0, 1, 2, 3, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24], "aws_util": 0, "modul": [0, 1, 2, 3, 5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "const": 0, "datamanage_util": 0, "exception_util": 0, "extract_util": 0, "logger_util": 0, "slack_util": 0, "system_util": 0, "target_unit_util": 0, "content": [0, 1, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27], "bigquery_util": 1, "bigqueryservic": 1, "func": 1, "custom_logg": 2, "test": 3, "testutil": 3, "main": [5, 7, 25], "cpc_predict": 6, "cvr_predict": 8, "bid_optimisation_ml": 9, "sophia": 10, "ai": [10, 12, 13, 14], "spai": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "base": 12, "util": [12, 15, 23, 24], "boost": 13, "catboost_wrap": 13, "lgb_wrap": 13, "tune_param": 13, "preprocess": [14, 17, 18, 19, 20, 21, 22], "label_encoder_wrap": 14, "optim": 15, "model": 15, "pid": [15, 21], "pid_util": 15, "servic": [16, 17, 18, 19, 20, 21, 22], "bid": 17, "calcul": [17, 18, 21], "config": [17, 18, 19, 20, 21, 22], "cap": 18, "cpc": 19, "estim": [19, 20, 22], "cvr": 20, "spa": 22, "dask": 23, "logger": 23, "kpi": 24, "cost": 24, "spa_predict": 26, "sophiaai": 27, "h1": 28, "\u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217": 28, "h2": 28, "h3": 28, "h4": 28, "h5": 28, "h6": 28, "chapter": [29, 30, 31], "2": [29, 30], "1": 30, "3": 31, "\u5165\u672d\u984d\u8abf\u6574": 32, "\u80cc\u666f": 32, "\u524d\u63d0\u6761\u4ef6": 32, "\u5165\u672d\u984d\u8abf\u6574\u306e\u6a5f\u68b0\u5b66\u7fd2\u5316\u65b9\u91dd": 32, "\u76ee\u7684\u95a2\u6570": 32, "\u5236\u7d04\u6761\u4ef6\u306b\u5bfe\u3059\u308b\u8a55\u4fa1\u6307\u6a19\u306e\u5bfe\u5fdc\u8868": 32, "\u6700\u9069\u5165\u672d\u6226\u7565\u306e\u76f4\u611f\u7684\u306a\u89e3\u91c8": 32, "\u65e5\u4e88\u7b97\u8abf\u6574": 34, "ml\u8981\u4ef6\u5b9a\u7fa9": 36, "cpc\u4e88\u6e2c\u30e2\u30c7\u30eb": 37, "cvr\u4e88\u6e2c\u30e2\u30c7\u30eb": 38, "kpi\u4e88\u6e2c\u30e2\u30c7\u30eb": 39, "spa\u4e88\u6e2c\u30e2\u30c7\u30eb": 40}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"common_module.bigquery_util package": [[1, "common-module-bigquery-util-package"]], "Submodules": [[1, "submodules"], [2, "submodules"], [3, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"], [17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"], [0, "submodules"]], "common_module.bigquery_util.bigqueryservice module": [[1, "module-common_module.bigquery_util.bigqueryservice"]], "common_module.bigquery_util.funcs module": [[1, "module-common_module.bigquery_util.funcs"]], "Module contents": [[1, "module-common_module.bigquery_util"], [2, "module-common_module.custom_logger"], [3, "module-common_module.tests"], [11, "module-spai"], [12, "module-spai.ai"], [13, "module-spai.ai.boosting"], [14, "module-spai.ai.preprocess"], [15, "module-spai.optim"], [16, "module-spai.service"], [17, "module-spai.service.bid"], [18, "module-spai.service.cap"], [19, "module-spai.service.cpc"], [20, "module-spai.service.cvr"], [21, "module-spai.service.pid"], [22, "module-spai.service.spa"], [23, "module-spai.utils"], [24, "module-spai.utils.kpi"], [0, "module-common_module"]], "common_module.custom_logger package": [[2, "common-module-custom-logger-package"]], "common_module.custom_logger.custom_logger module": [[2, "module-common_module.custom_logger.custom_logger"]], "common_module.tests package": [[3, "common-module-tests-package"]], "common_module.tests.testutil module": [[3, "module-common_module.tests.testutil"]], "common_module": [[4, "common-module"]], "main module": [[5, "module-main"], [7, "module-main"], [25, "module-main"]], "cpc_prediction": [[6, "cpc-prediction"]], "cvr_prediction": [[8, "cvr-prediction"]], "bid_optimisation_ml": [[9, "bid-optimisation-ml"]], "sophia-ai": [[10, "sophia-ai"]], "spai package": [[11, "spai-package"]], "Subpackages": [[11, "subpackages"], [12, "subpackages"], [16, "subpackages"], [23, "subpackages"], [0, "subpackages"]], "spai.ai package": [[12, "spai-ai-package"]], "spai.ai.base module": [[12, "module-spai.ai.base"]], "spai.ai.utils module": [[12, "module-spai.ai.utils"]], "spai.ai.boosting package": [[13, "spai-ai-boosting-package"]], "spai.ai.boosting.catboost_wrap module": [[13, "module-spai.ai.boosting.catboost_wrap"]], "spai.ai.boosting.lgb_wrap module": [[13, "module-spai.ai.boosting.lgb_wrap"]], "spai.ai.boosting.tune_params module": [[13, "module-spai.ai.boosting.tune_params"]], "spai.ai.preprocess package": [[14, "spai-ai-preprocess-package"]], "spai.ai.preprocess.label_encoder_wrap module": [[14, "module-spai.ai.preprocess.label_encoder_wrap"]], "spai.optim package": [[15, "spai-optim-package"]], "spai.optim.models module": [[15, "module-spai.optim.models"]], "spai.optim.pid module": [[15, "module-spai.optim.pid"]], "spai.optim.pid_util module": [[15, "module-spai.optim.pid_util"]], "spai.optim.utils module": [[15, "module-spai.optim.utils"]], "spai.service package": [[16, "spai-service-package"]], "spai.service.bid package": [[17, "spai-service-bid-package"]], "spai.service.bid.calculator module": [[17, "module-spai.service.bid.calculator"]], "spai.service.bid.config module": [[17, "module-spai.service.bid.config"]], "spai.service.bid.preprocess module": [[17, "module-spai.service.bid.preprocess"]], "spai.service.bid.service module": [[17, "module-spai.service.bid.service"]], "spai.service.cap package": [[18, "spai-service-cap-package"]], "spai.service.cap.calculator module": [[18, "module-spai.service.cap.calculator"]], "spai.service.cap.config module": [[18, "module-spai.service.cap.config"]], "spai.service.cap.preprocess module": [[18, "module-spai.service.cap.preprocess"]], "spai.service.cap.service module": [[18, "module-spai.service.cap.service"]], "spai.service.cpc package": [[19, "spai-service-cpc-package"]], "spai.service.cpc.config module": [[19, "module-spai.service.cpc.config"]], "spai.service.cpc.estimator module": [[19, "module-spai.service.cpc.estimator"]], "spai.service.cpc.preprocess module": [[19, "module-spai.service.cpc.preprocess"]], "spai.service.cpc.service module": [[19, "module-spai.service.cpc.service"]], "spai.service.cvr package": [[20, "spai-service-cvr-package"]], "spai.service.cvr.config module": [[20, "module-spai.service.cvr.config"]], "spai.service.cvr.estimator module": [[20, "module-spai.service.cvr.estimator"]], "spai.service.cvr.preprocess module": [[20, "module-spai.service.cvr.preprocess"]], "spai.service.cvr.service module": [[20, "module-spai.service.cvr.service"]], "spai.service.pid package": [[21, "spai-service-pid-package"]], "spai.service.pid.calculator module": [[21, "module-spai.service.pid.calculator"]], "spai.service.pid.config module": [[21, "module-spai.service.pid.config"]], "spai.service.pid.preprocess module": [[21, "module-spai.service.pid.preprocess"]], "spai.service.pid.service module": [[21, "module-spai.service.pid.service"]], "spai.service.spa package": [[22, "spai-service-spa-package"]], "spai.service.spa.config module": [[22, "module-spai.service.spa.config"]], "spai.service.spa.estimator module": [[22, "module-spai.service.spa.estimator"]], "spai.service.spa.preprocess module": [[22, "module-spai.service.spa.preprocess"]], "spai.service.spa.service module": [[22, "module-spai.service.spa.service"]], "spai.utils package": [[23, "spai-utils-package"]], "spai.utils.dask module": [[23, "module-spai.utils.dask"]], "spai.utils.logger module": [[23, "module-spai.utils.logger"]], "spai.utils.kpi package": [[24, "spai-utils-kpi-package"]], "spai.utils.kpi.cost module": [[24, "module-spai.utils.kpi.cost"]], "spai.utils.kpi.kpi module": [[24, "module-spai.utils.kpi.kpi"]], "spa_prediction": [[26, "spa-prediction"]], "SophiaAI": [[27, "sophiaai"]], "Contents": [[27, null]], "Chapter 2": [[29, "chapter-2"]], "Chapter 2-1": [[30, "chapter-2-1"]], "Chapter 3": [[31, "chapter-3"]], "\u5165\u672d\u984d\u8abf\u6574": [[32, "id1"]], "\u80cc\u666f": [[32, "id2"]], "\u524d\u63d0\u6761\u4ef6": [[32, "id3"]], "\u5165\u672d\u984d\u8abf\u6574\u306e\u6a5f\u68b0\u5b66\u7fd2\u5316\u65b9\u91dd": [[32, "id4"]], "\u76ee\u7684\u95a2\u6570\u3001\u5236\u7d04\u6761\u4ef6\u306b\u5bfe\u3059\u308b\u8a55\u4fa1\u6307\u6a19\u306e\u5bfe\u5fdc\u8868": [[32, "id5"]], "\u6700\u9069\u5165\u672d\u6226\u7565\u306e\u76f4\u611f\u7684\u306a\u89e3\u91c8": [[32, "id6"]], "\u65e5\u4e88\u7b97\u8abf\u6574": [[34, "id1"]], "ML\u8981\u4ef6\u5b9a\u7fa9": [[36, "ml"]], "CPC\u4e88\u6e2c\u30e2\u30c7\u30eb": [[37, "cpc"]], "CVR\u4e88\u6e2c\u30e2\u30c7\u30eb": [[38, "cvr"]], "KPI\u4e88\u6e2c\u30e2\u30c7\u30eb": [[39, "kpi"]], "SPA\u4e88\u6e2c\u30e2\u30c7\u30eb": [[40, "spa"]], "common_module package": [[0, "common-module-package"]], "common_module.aws_util module": [[0, "module-common_module.aws_util"]], "common_module.const module": [[0, "module-common_module.const"]], "common_module.datamanage_util module": [[0, "module-common_module.datamanage_util"]], "common_module.exception_util module": [[0, "module-common_module.exception_util"]], "common_module.extract_util module": [[0, "module-common_module.extract_util"]], "common_module.logger_util module": [[0, "module-common_module.logger_util"]], "common_module.slack_utils module": [[0, "common-module-slack-utils-module"]], "common_module.system_util module": [[0, "module-common_module.system_util"]], "common_module.target_unit_util module": [[0, "module-common_module.target_unit_util"]], "h1 \u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217": [[28, "h1"]], "h2 \u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217": [[28, "h2"]], "h3 \u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217": [[28, "h3"]], "h4 \u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217": [[28, "h4"]], "h5 \u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217": [[28, "h5"]], "h6 \u76f8\u5f53\u306e\u898b\u51fa\u3057\u306e\u6587\u5b57\u5217": [[28, "h6"]]}, "indexentries": {"business_exception() (in module common_module.exception_util)": [[0, "common_module.exception_util.business_exception"]], "common_module": [[0, "module-common_module"]], "common_module.aws_util": [[0, "module-common_module.aws_util"]], "common_module.const": [[0, "module-common_module.const"]], "common_module.datamanage_util": [[0, "module-common_module.datamanage_util"]], "common_module.exception_util": [[0, "module-common_module.exception_util"]], "common_module.extract_util": [[0, "module-common_module.extract_util"]], "common_module.logger_util": [[0, "module-common_module.logger_util"]], "common_module.system_util": [[0, "module-common_module.system_util"]], "common_module.target_unit_util": [[0, "module-common_module.target_unit_util"]], "complement_daily_ad() (in module common_module.extract_util)": [[0, "common_module.extract_util.complement_daily_ad"]], "complement_log() (in module common_module.extract_util)": [[0, "common_module.extract_util.complement_log"]], "copy_s3_file() (in module common_module.aws_util)": [[0, "common_module.aws_util.copy_s3_file"]], "get_bucket_key_from_s3_uri() (in module common_module.system_util)": [[0, "common_module.system_util.get_bucket_key_from_s3_uri"]], "get_custom_logger() (in module common_module.logger_util)": [[0, "common_module.logger_util.get_custom_logger"]], "get_s3_file_list() (in module common_module.aws_util)": [[0, "common_module.aws_util.get_s3_file_list"]], "get_s3_key() (in module common_module.system_util)": [[0, "common_module.system_util.get_s3_key"]], "get_ssm_parameter() (in module common_module.aws_util)": [[0, "common_module.aws_util.get_ssm_parameter"]], "get_target_date() (in module common_module.system_util)": [[0, "common_module.system_util.get_target_date"]], "get_target_unit_df() (in module common_module.target_unit_util)": [[0, "common_module.target_unit_util.get_target_unit_df"]], "load_file_list() (in module common_module.aws_util)": [[0, "common_module.aws_util.load_file_list"]], "module": [[0, "module-common_module"], [0, "module-common_module.aws_util"], [0, "module-common_module.const"], [0, "module-common_module.datamanage_util"], [0, "module-common_module.exception_util"], [0, "module-common_module.extract_util"], [0, "module-common_module.logger_util"], [0, "module-common_module.system_util"], [0, "module-common_module.target_unit_util"], [1, "module-common_module.bigquery_util"], [1, "module-common_module.bigquery_util.bigqueryservice"], [1, "module-common_module.bigquery_util.funcs"], [2, "module-common_module.custom_logger"], [2, "module-common_module.custom_logger.custom_logger"], [3, "module-common_module.tests"], [3, "module-common_module.tests.testutil"], [5, "module-main"], [7, "module-main"], [11, "module-spai"], [12, "module-spai.ai"], [12, "module-spai.ai.base"], [12, "module-spai.ai.utils"], [13, "module-spai.ai.boosting"], [13, "module-spai.ai.boosting.catboost_wrap"], [13, "module-spai.ai.boosting.lgb_wrap"], [13, "module-spai.ai.boosting.tune_params"], [14, "module-spai.ai.preprocess"], [14, "module-spai.ai.preprocess.label_encoder_wrap"], [15, "module-spai.optim"], [15, "module-spai.optim.models"], [15, "module-spai.optim.pid"], [15, "module-spai.optim.pid_util"], [15, "module-spai.optim.utils"], [16, "module-spai.service"], [17, "module-spai.service.bid"], [17, "module-spai.service.bid.calculator"], [17, "module-spai.service.bid.config"], [17, "module-spai.service.bid.preprocess"], [17, "module-spai.service.bid.service"], [18, "module-spai.service.cap"], [18, "module-spai.service.cap.calculator"], [18, "module-spai.service.cap.config"], [18, "module-spai.service.cap.preprocess"], [18, "module-spai.service.cap.service"], [19, "module-spai.service.cpc"], [19, "module-spai.service.cpc.config"], [19, "module-spai.service.cpc.estimator"], [19, "module-spai.service.cpc.preprocess"], [19, "module-spai.service.cpc.service"], [20, "module-spai.service.cvr"], [20, "module-spai.service.cvr.config"], [20, "module-spai.service.cvr.estimator"], [20, "module-spai.service.cvr.preprocess"], [20, "module-spai.service.cvr.service"], [21, "module-spai.service.pid"], [21, "module-spai.service.pid.calculator"], [21, "module-spai.service.pid.config"], [21, "module-spai.service.pid.preprocess"], [21, "module-spai.service.pid.service"], [22, "module-spai.service.spa"], [22, "module-spai.service.spa.config"], [22, "module-spai.service.spa.estimator"], [22, "module-spai.service.spa.preprocess"], [22, "module-spai.service.spa.service"], [23, "module-spai.utils"], [23, "module-spai.utils.dask"], [23, "module-spai.utils.logger"], [24, "module-spai.utils.kpi"], [24, "module-spai.utils.kpi.cost"], [24, "module-spai.utils.kpi.kpi"], [25, "module-main"]], "output_distributed_preprocess_manager() (in module common_module.datamanage_util)": [[0, "common_module.datamanage_util.output_distributed_preprocess_manager"]], "output_preprocess_manager() (in module common_module.datamanage_util)": [[0, "common_module.datamanage_util.output_preprocess_manager"]], "output_preprocess_to_s3_manager() (in module common_module.datamanage_util)": [[0, "common_module.datamanage_util.output_preprocess_to_s3_manager"]], "read_binary_from_s3() (in module common_module.aws_util)": [[0, "common_module.aws_util.read_binary_from_s3"]], "read_from_s3() (in module common_module.aws_util)": [[0, "common_module.aws_util.read_from_s3"]], "read_from_s3_uri() (in module common_module.aws_util)": [[0, "common_module.aws_util.read_from_s3_uri"]], "read_labelencoder_manager() (in module common_module.datamanage_util)": [[0, "common_module.datamanage_util.read_labelencoder_manager"]], "read_s3_manager() (in module common_module.datamanage_util)": [[0, "common_module.datamanage_util.read_s3_manager"]], "s3_client() (in module common_module.aws_util)": [[0, "common_module.aws_util.s3_client"]], "s3_resource() (in module common_module.aws_util)": [[0, "common_module.aws_util.s3_resource"]], "write_binary_to_s3() (in module common_module.aws_util)": [[0, "common_module.aws_util.write_binary_to_s3"]], "write_df_to_s3() (in module common_module.aws_util)": [[0, "common_module.aws_util.write_df_to_s3"]], "write_json_to_s3() (in module common_module.aws_util)": [[0, "common_module.aws_util.write_json_to_s3"]], "write_latest_labelencoder_manager() (in module common_module.datamanage_util)": [[0, "common_module.datamanage_util.write_latest_labelencoder_manager"]], "write_latest_model_manager() (in module common_module.datamanage_util)": [[0, "common_module.datamanage_util.write_latest_model_manager"]], "bigqueryservice (class in common_module.bigquery_util.bigqueryservice)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService"]], "cache_dir (common_module.bigquery_util.bigqueryservice.bigqueryservice attribute)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.CACHE_DIR"]], "append_from_df() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.append_from_df"]], "append_from_json() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.append_from_json"]], "append_from_query() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.append_from_query"]], "append_from_query_tpl() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.append_from_query_tpl"]], "append_gcs_to_bq() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.append_gcs_to_bq"]], "client (common_module.bigquery_util.bigqueryservice.bigqueryservice property)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.client"]], "common_module.bigquery_util": [[1, "module-common_module.bigquery_util"]], "common_module.bigquery_util.bigqueryservice": [[1, "module-common_module.bigquery_util.bigqueryservice"]], "common_module.bigquery_util.funcs": [[1, "module-common_module.bigquery_util.funcs"]], "create_table() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.create_table"]], "create_table_from_df() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.create_table_from_df"]], "delete_partition() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.delete_partition"]], "delete_table() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.delete_table"]], "extract_to_df() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.extract_to_df"]], "extract_to_integer_range_partition_table() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.extract_to_integer_range_partition_table"]], "extract_to_s3() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.extract_to_s3"]], "format_to_bq_schema() (in module common_module.bigquery_util.funcs)": [[1, "common_module.bigquery_util.funcs.format_to_bq_schema"]], "get_df_by_query() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.get_df_by_query"]], "get_query_job() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.get_query_job"]], "load_output_table_schema() (in module common_module.bigquery_util.funcs)": [[1, "common_module.bigquery_util.funcs.load_output_table_schema"]], "query_export_table() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.query_export_table"]], "recreate_table() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.recreate_table"]], "s3_to_gcs() (common_module.bigquery_util.bigqueryservice.bigqueryservice method)": [[1, "common_module.bigquery_util.bigqueryservice.BigQueryService.s3_to_gcs"]], "common_module.custom_logger": [[2, "module-common_module.custom_logger"]], "common_module.custom_logger.custom_logger": [[2, "module-common_module.custom_logger.custom_logger"]], "init_logging() (in module common_module.custom_logger.custom_logger)": [[2, "common_module.custom_logger.custom_logger.init_logging"]], "update_record_factory() (in module common_module.custom_logger.custom_logger)": [[2, "common_module.custom_logger.custom_logger.update_record_factory"]], "common_module.tests": [[3, "module-common_module.tests"]], "common_module.tests.testutil": [[3, "module-common_module.tests.testutil"]], "create_gcs_bucket() (in module common_module.tests.testutil)": [[3, "common_module.tests.testutil.create_gcs_bucket"]], "create_s3_bucket() (in module common_module.tests.testutil)": [[3, "common_module.tests.testutil.create_s3_bucket"]], "delete_all_s3_data() (in module common_module.tests.testutil)": [[3, "common_module.tests.testutil.delete_all_s3_data"]], "delete_gcs_bucket() (in module common_module.tests.testutil)": [[3, "common_module.tests.testutil.delete_gcs_bucket"]], "delete_s3_bucket() (in module common_module.tests.testutil)": [[3, "common_module.tests.testutil.delete_s3_bucket"]], "is_execute_external() (in module common_module.tests.testutil)": [[3, "common_module.tests.testutil.is_execute_external"]], "reason_execute_external() (in module common_module.tests.testutil)": [[3, "common_module.tests.testutil.reason_execute_external"]], "main": [[5, "module-main"], [7, "module-main"], [25, "module-main"]], "spai": [[11, "module-spai"]], "basemlmodel (class in spai.ai.base)": [[12, "spai.ai.base.BaseMLModel"]], "basemodel (class in spai.ai.base)": [[12, "spai.ai.base.BaseModel"]], "deserialize() (in module spai.ai.utils)": [[12, "spai.ai.utils.deserialize"]], "fit() (spai.ai.base.basemlmodel method)": [[12, "spai.ai.base.BaseMLModel.fit"]], "from_bytes() (spai.ai.base.basemodel method)": [[12, "spai.ai.base.BaseModel.from_bytes"]], "predict() (spai.ai.base.basemlmodel method)": [[12, "spai.ai.base.BaseMLModel.predict"]], "serialize() (in module spai.ai.utils)": [[12, "spai.ai.utils.serialize"]], "spai.ai": [[12, "module-spai.ai"]], "spai.ai.base": [[12, "module-spai.ai.base"]], "spai.ai.utils": [[12, "module-spai.ai.utils"]], "to_bytes() (spai.ai.base.basemodel method)": [[12, "spai.ai.base.BaseModel.to_bytes"]], "catboostmodel (class in spai.ai.boosting.catboost_wrap)": [[13, "spai.ai.boosting.catboost_wrap.CatBoostModel"]], "lgbmodel (class in spai.ai.boosting.lgb_wrap)": [[13, "spai.ai.boosting.lgb_wrap.LGBModel"]], "log1pmodel (class in spai.ai.boosting.lgb_wrap)": [[13, "spai.ai.boosting.lgb_wrap.Log1pModel"]], "probmodel (class in spai.ai.boosting.lgb_wrap)": [[13, "spai.ai.boosting.lgb_wrap.ProbModel"]], "estimate_fitting_time() (in module spai.ai.boosting.tune_params)": [[13, "spai.ai.boosting.tune_params.estimate_fitting_time"]], "fit() (spai.ai.boosting.catboost_wrap.catboostmodel method)": [[13, "spai.ai.boosting.catboost_wrap.CatBoostModel.fit"]], "fit() (spai.ai.boosting.lgb_wrap.lgbmodel method)": [[13, "spai.ai.boosting.lgb_wrap.LGBModel.fit"]], "from_bytes() (spai.ai.boosting.catboost_wrap.catboostmodel class method)": [[13, "spai.ai.boosting.catboost_wrap.CatBoostModel.from_bytes"]], "from_bytes() (spai.ai.boosting.lgb_wrap.lgbmodel class method)": [[13, "spai.ai.boosting.lgb_wrap.LGBModel.from_bytes"]], "get_tuned_params() (in module spai.ai.boosting.tune_params)": [[13, "spai.ai.boosting.tune_params.get_tuned_params"]], "get_tuned_params_catboost() (in module spai.ai.boosting.tune_params)": [[13, "spai.ai.boosting.tune_params.get_tuned_params_catboost"]], "get_tuned_params_lgb() (in module spai.ai.boosting.tune_params)": [[13, "spai.ai.boosting.tune_params.get_tuned_params_lgb"]], "objective (spai.ai.boosting.lgb_wrap.lgbmodel attribute)": [[13, "spai.ai.boosting.lgb_wrap.LGBModel.objective"]], "objective (spai.ai.boosting.lgb_wrap.log1pmodel attribute)": [[13, "spai.ai.boosting.lgb_wrap.Log1pModel.objective"]], "objective (spai.ai.boosting.lgb_wrap.probmodel attribute)": [[13, "spai.ai.boosting.lgb_wrap.ProbModel.objective"]], "params (spai.ai.boosting.lgb_wrap.log1pmodel attribute)": [[13, "spai.ai.boosting.lgb_wrap.Log1pModel.params"]], "params (spai.ai.boosting.lgb_wrap.probmodel attribute)": [[13, "spai.ai.boosting.lgb_wrap.ProbModel.params"]], "predict() (spai.ai.boosting.catboost_wrap.catboostmodel method)": [[13, "spai.ai.boosting.catboost_wrap.CatBoostModel.predict"]], "predict() (spai.ai.boosting.lgb_wrap.lgbmodel method)": [[13, "spai.ai.boosting.lgb_wrap.LGBModel.predict"]], "spai.ai.boosting": [[13, "module-spai.ai.boosting"]], "spai.ai.boosting.catboost_wrap": [[13, "module-spai.ai.boosting.catboost_wrap"]], "spai.ai.boosting.lgb_wrap": [[13, "module-spai.ai.boosting.lgb_wrap"]], "spai.ai.boosting.tune_params": [[13, "module-spai.ai.boosting.tune_params"]], "to_bytes() (spai.ai.boosting.catboost_wrap.catboostmodel method)": [[13, "spai.ai.boosting.catboost_wrap.CatBoostModel.to_bytes"]], "to_bytes() (spai.ai.boosting.lgb_wrap.lgbmodel method)": [[13, "spai.ai.boosting.lgb_wrap.LGBModel.to_bytes"]], "labelencoder (class in spai.ai.preprocess.label_encoder_wrap)": [[14, "spai.ai.preprocess.label_encoder_wrap.LabelEncoder"]], "fit() (spai.ai.preprocess.label_encoder_wrap.labelencoder method)": [[14, "spai.ai.preprocess.label_encoder_wrap.LabelEncoder.fit"]], "from_bytes() (spai.ai.preprocess.label_encoder_wrap.labelencoder class method)": [[14, "spai.ai.preprocess.label_encoder_wrap.LabelEncoder.from_bytes"]], "spai.ai.preprocess": [[14, "module-spai.ai.preprocess"]], "spai.ai.preprocess.label_encoder_wrap": [[14, "module-spai.ai.preprocess.label_encoder_wrap"]], "to_bytes() (spai.ai.preprocess.label_encoder_wrap.labelencoder method)": [[14, "spai.ai.preprocess.label_encoder_wrap.LabelEncoder.to_bytes"]], "transform() (spai.ai.preprocess.label_encoder_wrap.labelencoder method)": [[14, "spai.ai.preprocess.label_encoder_wrap.LabelEncoder.transform"]], "ad (class in spai.optim.models)": [[15, "spai.optim.models.Ad"]], "bidding_lb_ratio_over (spai.optim.models.biddingmlconfig attribute)": [[15, "spai.optim.models.BiddingMLConfig.BIDDING_LB_RATIO_OVER"]], "bidding_lb_ratio_short (spai.optim.models.biddingmlconfig attribute)": [[15, "spai.optim.models.BiddingMLConfig.BIDDING_LB_RATIO_SHORT"]], "bidding_price_down_ratio (spai.optim.models.biddingruleconfig attribute)": [[15, "spai.optim.models.BiddingRuleConfig.BIDDING_PRICE_DOWN_RATIO"]], "bidding_price_up_ratio (spai.optim.models.biddingruleconfig attribute)": [[15, "spai.optim.models.BiddingRuleConfig.BIDDING_PRICE_UP_RATIO"]], "bidding_ub_ratio_over (spai.optim.models.biddingmlconfig attribute)": [[15, "spai.optim.models.BiddingMLConfig.BIDDING_UB_RATIO_OVER"]], "bidding_ub_ratio_short (spai.optim.models.biddingmlconfig attribute)": [[15, "spai.optim.models.BiddingMLConfig.BIDDING_UB_RATIO_SHORT"]], "budget (spai.optim.models.mode attribute)": [[15, "spai.optim.models.Mode.BUDGET"]], "biddingmlconfig (class in spai.optim.models)": [[15, "spai.optim.models.BiddingMLConfig"]], "biddingruleconfig (class in spai.optim.models)": [[15, "spai.optim.models.BiddingRuleConfig"]], "c (spai.optim.models.settings property)": [[15, "spai.optim.models.Settings.C"]], "click (spai.optim.models.purpose attribute)": [[15, "spai.optim.models.Purpose.CLICK"]], "conversion (spai.optim.models.purpose attribute)": [[15, "spai.optim.models.Purpose.CONVERSION"]], "cpa (spai.optim.models.kpi attribute)": [[15, "spai.optim.models.KPI.CPA"]], "cpc (spai.optim.models.kpi attribute)": [[15, "spai.optim.models.KPI.CPC"]], "cpc_ratio (spai.optim.models.biddingruleconfig attribute)": [[15, "spai.optim.models.BiddingRuleConfig.CPC_RATIO"]], "dataforcpc (class in spai.optim.models)": [[15, "spai.optim.models.DataForCPC"]], "kpi (class in spai.optim.models)": [[15, "spai.optim.models.KPI"]], "kpi (spai.optim.models.mode attribute)": [[15, "spai.optim.models.Mode.KPI"]], "mode (class in spai.optim.models)": [[15, "spai.optim.models.Mode"]], "null (spai.optim.models.kpi attribute)": [[15, "spai.optim.models.KPI.NULL"]], "optimisetargetconfig (class in spai.optim.models)": [[15, "spai.optim.models.OptimiseTargetConfig"]], "pidconfig (class in spai.optim.models)": [[15, "spai.optim.models.PIDConfig"]], "performance (class in spai.optim.models)": [[15, "spai.optim.models.Performance"]], "purpose (class in spai.optim.models)": [[15, "spai.optim.models.Purpose"]], "roas (spai.optim.models.kpi attribute)": [[15, "spai.optim.models.KPI.ROAS"]], "sales (spai.optim.models.purpose attribute)": [[15, "spai.optim.models.Purpose.SALES"]], "settings (class in spai.optim.models)": [[15, "spai.optim.models.Settings"]], "state (class in spai.optim.models)": [[15, "spai.optim.models.State"]], "threshold_of_clicks_weekly (spai.optim.models.optimisetargetconfig attribute)": [[15, "spai.optim.models.OptimiseTargetConfig.THRESHOLD_OF_CLICKS_WEEKLY"]], "threshold_of_cv_monthly (spai.optim.models.optimisetargetconfig attribute)": [[15, "spai.optim.models.OptimiseTargetConfig.THRESHOLD_OF_CV_MONTHLY"]], "threshold_of_impressions_weekly (spai.optim.models.biddingruleconfig attribute)": [[15, "spai.optim.models.BiddingRuleConfig.THRESHOLD_OF_IMPRESSIONS_WEEKLY"]], "threshold_of_sales_monthly (spai.optim.models.optimisetargetconfig attribute)": [[15, "spai.optim.models.OptimiseTargetConfig.THRESHOLD_OF_SALES_MONTHLY"]], "accelerate_rate (spai.optim.models.pidconfig attribute)": [[15, "spai.optim.models.PIDConfig.accelerate_rate"]], "as_dict() (spai.optim.models.performance method)": [[15, "spai.optim.models.Performance.as_dict"]], "as_dict() (spai.optim.models.settings method)": [[15, "spai.optim.models.Settings.as_dict"]], "as_dict() (spai.optim.models.state method)": [[15, "spai.optim.models.State.as_dict"]], "bidding_price (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.bidding_price"]], "calc_bid_cpc_limit() (in module spai.optim.pid_util)": [[15, "spai.optim.pid_util.calc_bid_cpc_limit"]], "calc_sigma() (spai.optim.models.settings method)": [[15, "spai.optim.models.Settings.calc_sigma"]], "calc_states() (in module spai.optim.pid)": [[15, "spai.optim.pid.calc_states"]], "calc_v() (spai.optim.models.settings method)": [[15, "spai.optim.models.Settings.calc_v"]], "calc_weight() (spai.optim.models.settings method)": [[15, "spai.optim.models.Settings.calc_weight"]], "clicks (spai.optim.models.dataforcpc attribute)": [[15, "spai.optim.models.DataForCPC.clicks"]], "clicks (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.clicks"]], "clip() (in module spai.optim.utils)": [[15, "spai.optim.utils.clip"]], "conversions (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.conversions"]], "costs (spai.optim.models.dataforcpc attribute)": [[15, "spai.optim.models.DataForCPC.costs"]], "costs (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.costs"]], "cpa() (in module spai.optim.utils)": [[15, "spai.optim.utils.cpa"]], "cpc (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.cpc"]], "cpc() (in module spai.optim.utils)": [[15, "spai.optim.utils.cpc"]], "ctr() (in module spai.optim.utils)": [[15, "spai.optim.utils.ctr"]], "cvr (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.cvr"]], "cvr() (in module spai.optim.utils)": [[15, "spai.optim.utils.cvr"]], "date (spai.optim.models.dataforcpc attribute)": [[15, "spai.optim.models.DataForCPC.date"]], "date (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.date"]], "delta() (spai.optim.models.ad method)": [[15, "spai.optim.models.Ad.delta"]], "dict2perf() (in module spai.optim.pid_util)": [[15, "spai.optim.pid_util.dict2perf"]], "dict2qpstates() (in module spai.optim.pid_util)": [[15, "spai.optim.pid_util.dict2qpstates"]], "dict2settings() (in module spai.optim.pid_util)": [[15, "spai.optim.pid_util.dict2settings"]], "ema() (in module spai.optim.utils)": [[15, "spai.optim.utils.ema"]], "ema_cost() (spai.optim.models.ad method)": [[15, "spai.optim.models.Ad.ema_cost"]], "error (spai.optim.models.state attribute)": [[15, "spai.optim.models.State.error"]], "estimate_ad_cpc() (in module spai.optim.pid_util)": [[15, "spai.optim.pid_util.estimate_ad_cpc"]], "has_predicted_kpi() (spai.optim.models.ad method)": [[15, "spai.optim.models.Ad.has_predicted_kpi"]], "impressions (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.impressions"]], "inv_roas() (in module spai.optim.utils)": [[15, "spai.optim.utils.inv_roas"]], "is_optimise_target() (spai.optim.models.settings method)": [[15, "spai.optim.models.Settings.is_optimise_target"]], "is_valid() (spai.optim.models.ad method)": [[15, "spai.optim.models.Ad.is_valid"]], "isnan() (in module spai.optim.pid)": [[15, "spai.optim.pid.isnan"]], "kd (spai.optim.models.state attribute)": [[15, "spai.optim.models.State.kd"]], "ki (spai.optim.models.state attribute)": [[15, "spai.optim.models.State.ki"]], "kp (spai.optim.models.state attribute)": [[15, "spai.optim.models.State.kp"]], "last_bidding_price (spai.optim.models.ad property)": [[15, "spai.optim.models.Ad.last_bidding_price"]], "lb_ratio_output (spai.optim.models.pidconfig attribute)": [[15, "spai.optim.models.PIDConfig.lb_ratio_output"]], "monthly_conversion() (spai.optim.models.ad method)": [[15, "spai.optim.models.Ad.monthly_conversion"]], "monthly_sales() (spai.optim.models.ad method)": [[15, "spai.optim.models.Ad.monthly_sales"]], "nan2const() (in module spai.optim.utils)": [[15, "spai.optim.utils.nan2const"]], "nan2none() (in module spai.optim.utils)": [[15, "spai.optim.utils.nan2none"]], "nan2zero() (in module spai.optim.utils)": [[15, "spai.optim.utils.nan2zero"]], "none2const() (in module spai.optim.utils)": [[15, "spai.optim.utils.none2const"]], "none2zero() (in module spai.optim.utils)": [[15, "spai.optim.utils.none2zero"]], "not_ml_applied_days_threshold (spai.optim.models.pidconfig attribute)": [[15, "spai.optim.models.PIDConfig.not_ml_applied_days_threshold"]], "obs_kpi() (spai.optim.models.settings method)": [[15, "spai.optim.models.Settings.obs_kpi"]], "original_output (spai.optim.models.state attribute)": [[15, "spai.optim.models.State.original_output"]], "output (spai.optim.models.state attribute)": [[15, "spai.optim.models.State.output"]], "reduce_rate (spai.optim.models.pidconfig attribute)": [[15, "spai.optim.models.PIDConfig.reduce_rate"]], "roas() (in module spai.optim.utils)": [[15, "spai.optim.utils.roas"]], "rpc (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.rpc"]], "rpc() (in module spai.optim.utils)": [[15, "spai.optim.utils.rpc"]], "safe_div() (in module spai.optim.utils)": [[15, "spai.optim.utils.safe_div"]], "safe_exp() (in module spai.optim.utils)": [[15, "spai.optim.utils.safe_exp"]], "sales (spai.optim.models.performance attribute)": [[15, "spai.optim.models.Performance.sales"]], "sign (spai.optim.models.pidconfig attribute)": [[15, "spai.optim.models.PIDConfig.sign"]], "spai.optim": [[15, "module-spai.optim"]], "spai.optim.models": [[15, "module-spai.optim.models"]], "spai.optim.pid": [[15, "module-spai.optim.pid"]], "spai.optim.pid_util": [[15, "module-spai.optim.pid_util"]], "spai.optim.utils": [[15, "module-spai.optim.utils"]], "sum_error (spai.optim.models.state attribute)": [[15, "spai.optim.models.State.sum_error"]], "th_ratio_accelerate (spai.optim.models.pidconfig attribute)": [[15, "spai.optim.models.PIDConfig.th_ratio_accelerate"]], "th_ratio_reduce_oscillate (spai.optim.models.pidconfig attribute)": [[15, "spai.optim.models.PIDConfig.th_ratio_reduce_oscillate"]], "ub_ratio_output (spai.optim.models.pidconfig attribute)": [[15, "spai.optim.models.PIDConfig.ub_ratio_output"]], "value() (spai.optim.models.ad method)": [[15, "spai.optim.models.Ad.value"]], "weekly_clicks() (spai.optim.models.ad method)": [[15, "spai.optim.models.Ad.weekly_clicks"]], "weighted_cpc() (in module spai.optim.utils)": [[15, "spai.optim.utils.weighted_cpc"]], "weighted_cpc_by_df() (in module spai.optim.utils)": [[15, "spai.optim.utils.weighted_cpc_by_df"]], "weighted_ma() (in module spai.optim.utils)": [[15, "spai.optim.utils.weighted_ma"]], "weighted_ma_weight() (in module spai.optim.utils)": [[15, "spai.optim.utils.weighted_ma_weight"]], "wma() (in module spai.optim.pid)": [[15, "spai.optim.pid.wma"]], "spai.service": [[16, "module-spai.service"]], "bidcalculationservice (class in spai.service.bid.service)": [[17, "spai.service.bid.service.BIDCalculationService"]], "bidcalculator (class in spai.service.bid.calculator)": [[17, "spai.service.bid.calculator.BIDCalculator"]], "bidding_lb_ratio_over (spai.service.bid.config.biddingmlconfig attribute)": [[17, "spai.service.bid.config.BiddingMLConfig.BIDDING_LB_RATIO_OVER"]], "bidding_lb_ratio_short (spai.service.bid.config.biddingmlconfig attribute)": [[17, "spai.service.bid.config.BiddingMLConfig.BIDDING_LB_RATIO_SHORT"]], "bidding_price_down_ratio (spai.service.bid.config.biddingruleconfig attribute)": [[17, "spai.service.bid.config.BiddingRuleConfig.BIDDING_PRICE_DOWN_RATIO"]], "bidding_price_up_ratio (spai.service.bid.config.biddingruleconfig attribute)": [[17, "spai.service.bid.config.BiddingRuleConfig.BIDDING_PRICE_UP_RATIO"]], "bidding_ub_ratio_over (spai.service.bid.config.biddingmlconfig attribute)": [[17, "spai.service.bid.config.BiddingMLConfig.BIDDING_UB_RATIO_OVER"]], "bidding_ub_ratio_short (spai.service.bid.config.biddingmlconfig attribute)": [[17, "spai.service.bid.config.BiddingMLConfig.BIDDING_UB_RATIO_SHORT"]], "bidpreprocessor (class in spai.service.bid.preprocess)": [[17, "spai.service.bid.preprocess.BIDPreprocessor"]], "biddingmlconfig (class in spai.service.bid.config)": [[17, "spai.service.bid.config.BiddingMLConfig"]], "biddingruleconfig (class in spai.service.bid.config)": [[17, "spai.service.bid.config.BiddingRuleConfig"]], "cpc_ratio (spai.service.bid.config.biddingruleconfig attribute)": [[17, "spai.service.bid.config.BiddingRuleConfig.CPC_RATIO"]], "optimisetargetconfig (class in spai.service.bid.config)": [[17, "spai.service.bid.config.OptimiseTargetConfig"]], "threshold_of_clicks_weekly (spai.service.bid.config.optimisetargetconfig attribute)": [[17, "spai.service.bid.config.OptimiseTargetConfig.THRESHOLD_OF_CLICKS_WEEKLY"]], "threshold_of_cv_monthly (spai.service.bid.config.optimisetargetconfig attribute)": [[17, "spai.service.bid.config.OptimiseTargetConfig.THRESHOLD_OF_CV_MONTHLY"]], "threshold_of_impressions_weekly (spai.service.bid.config.biddingruleconfig attribute)": [[17, "spai.service.bid.config.BiddingRuleConfig.THRESHOLD_OF_IMPRESSIONS_WEEKLY"]], "threshold_of_sales_monthly (spai.service.bid.config.optimisetargetconfig attribute)": [[17, "spai.service.bid.config.OptimiseTargetConfig.THRESHOLD_OF_SALES_MONTHLY"]], "calc() (spai.service.bid.calculator.bidcalculator method)": [[17, "spai.service.bid.calculator.BIDCalculator.calc"]], "calc() (spai.service.bid.service.bidcalculationservice method)": [[17, "spai.service.bid.service.BIDCalculationService.calc"]], "estimate_ad_cpc() (in module spai.service.bid.calculator)": [[17, "spai.service.bid.calculator.estimate_ad_cpc"]], "get_kpi() (in module spai.service.bid.calculator)": [[17, "spai.service.bid.calculator.get_kpi"]], "get_purpose() (in module spai.service.bid.calculator)": [[17, "spai.service.bid.calculator.get_purpose"]], "spai.service.bid": [[17, "module-spai.service.bid"]], "spai.service.bid.calculator": [[17, "module-spai.service.bid.calculator"]], "spai.service.bid.config": [[17, "module-spai.service.bid.config"]], "spai.service.bid.preprocess": [[17, "module-spai.service.bid.preprocess"]], "spai.service.bid.service": [[17, "module-spai.service.bid.service"]], "transform() (spai.service.bid.preprocess.bidpreprocessor method)": [[17, "spai.service.bid.preprocess.BIDPreprocessor.transform"]], "capcalculationservice (class in spai.service.cap.service)": [[18, "spai.service.cap.service.CAPCalculationService"]], "capcalculator (class in spai.service.cap.calculator)": [[18, "spai.service.cap.calculator.CAPCalculator"]], "cappreprocessor (class in spai.service.cap.preprocess)": [[18, "spai.service.cap.preprocess.CAPPreprocessor"]], "calc() (spai.service.cap.calculator.capcalculator method)": [[18, "spai.service.cap.calculator.CAPCalculator.calc"]], "calc() (spai.service.cap.service.capcalculationservice method)": [[18, "spai.service.cap.service.CAPCalculationService.calc"]], "spai.service.cap": [[18, "module-spai.service.cap"]], "spai.service.cap.calculator": [[18, "module-spai.service.cap.calculator"]], "spai.service.cap.config": [[18, "module-spai.service.cap.config"]], "spai.service.cap.preprocess": [[18, "module-spai.service.cap.preprocess"]], "spai.service.cap.service": [[18, "module-spai.service.cap.service"]], "to_purpose() (in module spai.service.cap.preprocess)": [[18, "spai.service.cap.preprocess.to_purpose"]], "transform() (spai.service.cap.preprocess.cappreprocessor method)": [[18, "spai.service.cap.preprocess.CAPPreprocessor.transform"]], "cpcestimator (class in spai.service.cpc.estimator)": [[19, "spai.service.cpc.estimator.CPCEstimator"]], "cpcmodel (class in spai.service.cpc.estimator)": [[19, "spai.service.cpc.estimator.CPCModel"]], "cpcpredictionservice (class in spai.service.cpc.service)": [[19, "spai.service.cpc.service.CPCPredictionService"]], "cpcpreprocessor (class in spai.service.cpc.preprocess)": [[19, "spai.service.cpc.preprocess.CPCPreprocessor"]], "add_catcodes() (spai.service.cpc.preprocess.cpcpreprocessor method)": [[19, "spai.service.cpc.preprocess.CPCPreprocessor.add_catcodes"]], "agg() (in module spai.service.cpc.preprocess)": [[19, "spai.service.cpc.preprocess.agg"]], "fit() (spai.service.cpc.estimator.cpcestimator method)": [[19, "spai.service.cpc.estimator.CPCEstimator.fit"]], "get_dtypes() (in module spai.service.cpc.preprocess)": [[19, "spai.service.cpc.preprocess.get_dtypes"]], "params (spai.service.cpc.estimator.cpcmodel attribute)": [[19, "spai.service.cpc.estimator.CPCModel.params"]], "predict() (spai.service.cpc.estimator.cpcestimator method)": [[19, "spai.service.cpc.estimator.CPCEstimator.predict"]], "predict() (spai.service.cpc.service.cpcpredictionservice method)": [[19, "spai.service.cpc.service.CPCPredictionService.predict"]], "preprocess() (spai.service.cpc.preprocess.cpcpreprocessor method)": [[19, "spai.service.cpc.preprocess.CPCPreprocessor.preprocess"]], "set_unit_id() (in module spai.service.cpc.preprocess)": [[19, "spai.service.cpc.preprocess.set_unit_id"]], "spai.service.cpc": [[19, "module-spai.service.cpc"]], "spai.service.cpc.config": [[19, "module-spai.service.cpc.config"]], "spai.service.cpc.estimator": [[19, "module-spai.service.cpc.estimator"]], "spai.service.cpc.preprocess": [[19, "module-spai.service.cpc.preprocess"]], "spai.service.cpc.service": [[19, "module-spai.service.cpc.service"]], "train() (spai.service.cpc.service.cpcpredictionservice method)": [[19, "spai.service.cpc.service.CPCPredictionService.train"]], "cvrestimator (class in spai.service.cvr.estimator)": [[20, "spai.service.cvr.estimator.CVREstimator"]], "cvrmodel (class in spai.service.cvr.estimator)": [[20, "spai.service.cvr.estimator.CVRModel"]], "cvrpredictionservice (class in spai.service.cvr.service)": [[20, "spai.service.cvr.service.CVRPredictionService"]], "cvrpreprocessor (class in spai.service.cvr.preprocess)": [[20, "spai.service.cvr.preprocess.CVRPreprocessor"]], "add_catcodes() (spai.service.cvr.preprocess.cvrpreprocessor method)": [[20, "spai.service.cvr.preprocess.CVRPreprocessor.add_catcodes"]], "agg() (in module spai.service.cvr.preprocess)": [[20, "spai.service.cvr.preprocess.agg"]], "fit() (spai.service.cvr.estimator.cvrestimator method)": [[20, "spai.service.cvr.estimator.CVREstimator.fit"]], "get_dtypes() (in module spai.service.cvr.preprocess)": [[20, "spai.service.cvr.preprocess.get_dtypes"]], "kpi_diff() (in module spai.service.cvr.preprocess)": [[20, "spai.service.cvr.preprocess.kpi_diff"]], "merge_query_df() (in module spai.service.cvr.preprocess)": [[20, "spai.service.cvr.preprocess.merge_query_df"]], "merge_query_feats() (in module spai.service.cvr.preprocess)": [[20, "spai.service.cvr.preprocess.merge_query_feats"]], "params (spai.service.cvr.estimator.cvrmodel attribute)": [[20, "spai.service.cvr.estimator.CVRModel.params"]], "predict() (spai.service.cvr.estimator.cvrestimator method)": [[20, "spai.service.cvr.estimator.CVREstimator.predict"]], "predict() (spai.service.cvr.service.cvrpredictionservice method)": [[20, "spai.service.cvr.service.CVRPredictionService.predict"]], "preprocess() (spai.service.cvr.preprocess.cvrpreprocessor method)": [[20, "spai.service.cvr.preprocess.CVRPreprocessor.preprocess"]], "set_unit_id() (in module spai.service.cvr.preprocess)": [[20, "spai.service.cvr.preprocess.set_unit_id"]], "spai.service.cvr": [[20, "module-spai.service.cvr"]], "spai.service.cvr.config": [[20, "module-spai.service.cvr.config"]], "spai.service.cvr.estimator": [[20, "module-spai.service.cvr.estimator"]], "spai.service.cvr.preprocess": [[20, "module-spai.service.cvr.preprocess"]], "spai.service.cvr.service": [[20, "module-spai.service.cvr.service"]], "train() (spai.service.cvr.service.cvrpredictionservice method)": [[20, "spai.service.cvr.service.CVRPredictionService.train"]], "pidcalculationservice (class in spai.service.pid.service)": [[21, "spai.service.pid.service.PIDCalculationService"]], "pidcalculator (class in spai.service.pid.calculator)": [[21, "spai.service.pid.calculator.PIDCalculator"]], "pidpreprocessor (class in spai.service.pid.preprocess)": [[21, "spai.service.pid.preprocess.PIDPreprocessor"]], "calc() (spai.service.pid.calculator.pidcalculator method)": [[21, "spai.service.pid.calculator.PIDCalculator.calc"]], "calc() (spai.service.pid.service.pidcalculationservice method)": [[21, "spai.service.pid.service.PIDCalculationService.calc"]], "map_pid_calc() (spai.service.pid.calculator.pidcalculator method)": [[21, "spai.service.pid.calculator.PIDCalculator.map_pid_calc"]], "spai.service.pid": [[21, "module-spai.service.pid"]], "spai.service.pid.calculator": [[21, "module-spai.service.pid.calculator"]], "spai.service.pid.config": [[21, "module-spai.service.pid.config"]], "spai.service.pid.preprocess": [[21, "module-spai.service.pid.preprocess"]], "spai.service.pid.service": [[21, "module-spai.service.pid.service"]], "transform() (spai.service.pid.preprocess.pidpreprocessor method)": [[21, "spai.service.pid.preprocess.PIDPreprocessor.transform"]], "spaestimator (class in spai.service.spa.estimator)": [[22, "spai.service.spa.estimator.SPAEstimator"]], "spamodel (class in spai.service.spa.estimator)": [[22, "spai.service.spa.estimator.SPAModel"]], "spapredictionservice (class in spai.service.spa.service)": [[22, "spai.service.spa.service.SPAPredictionService"]], "spapreprocessor (class in spai.service.spa.preprocess)": [[22, "spai.service.spa.preprocess.SPAPreprocessor"]], "add_catcodes() (spai.service.spa.preprocess.spapreprocessor method)": [[22, "spai.service.spa.preprocess.SPAPreprocessor.add_catcodes"]], "agg() (in module spai.service.spa.preprocess)": [[22, "spai.service.spa.preprocess.agg"]], "fit() (spai.service.spa.estimator.spaestimator method)": [[22, "spai.service.spa.estimator.SPAEstimator.fit"]], "get_dtypes() (in module spai.service.spa.preprocess)": [[22, "spai.service.spa.preprocess.get_dtypes"]], "kpi_diff() (in module spai.service.spa.preprocess)": [[22, "spai.service.spa.preprocess.kpi_diff"]], "merge_query_df() (in module spai.service.spa.preprocess)": [[22, "spai.service.spa.preprocess.merge_query_df"]], "merge_query_feats() (in module spai.service.spa.preprocess)": [[22, "spai.service.spa.preprocess.merge_query_feats"]], "params (spai.service.spa.estimator.spamodel attribute)": [[22, "spai.service.spa.estimator.SPAModel.params"]], "predict() (spai.service.spa.estimator.spaestimator method)": [[22, "spai.service.spa.estimator.SPAEstimator.predict"]], "predict() (spai.service.spa.service.spapredictionservice method)": [[22, "spai.service.spa.service.SPAPredictionService.predict"]], "preprocess() (spai.service.spa.preprocess.spapreprocessor method)": [[22, "spai.service.spa.preprocess.SPAPreprocessor.preprocess"]], "set_unit_id() (in module spai.service.spa.preprocess)": [[22, "spai.service.spa.preprocess.set_unit_id"]], "spai.service.spa": [[22, "module-spai.service.spa"]], "spai.service.spa.config": [[22, "module-spai.service.spa.config"]], "spai.service.spa.estimator": [[22, "module-spai.service.spa.estimator"]], "spai.service.spa.preprocess": [[22, "module-spai.service.spa.preprocess"]], "spai.service.spa.service": [[22, "module-spai.service.spa.service"]], "train() (spai.service.spa.service.spapredictionservice method)": [[22, "spai.service.spa.service.SPAPredictionService.train"]], "dask_dataframe_from_pandas() (in module spai.utils.dask)": [[23, "spai.utils.dask.dask_dataframe_from_pandas"]], "get_custom_logger() (in module spai.utils.logger)": [[23, "spai.utils.logger.get_custom_logger"]], "get_dask_client() (in module spai.utils.dask)": [[23, "spai.utils.dask.get_dask_client"]], "make_meta() (in module spai.utils.dask)": [[23, "spai.utils.dask.make_meta"]], "merge() (in module spai.utils.dask)": [[23, "spai.utils.dask.merge"]], "spai.utils": [[23, "module-spai.utils"]], "spai.utils.dask": [[23, "module-spai.utils.dask"]], "spai.utils.logger": [[23, "module-spai.utils.logger"]], "adjust_roas_target() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.adjust_roas_target"]], "agg_feats() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.agg_feats"]], "calc_kpis() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.calc_kpis"]], "calc_lag() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.calc_lag"]], "calc_mean() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.calc_mean"]], "calc_placement_kpi() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.calc_placement_kpi"]], "calc_unit_weekly_cpc_for_cap() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.calc_unit_weekly_cpc_for_cap"]], "ewm() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.ewm"]], "feat_column_name() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.feat_column_name"]], "get_c() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.get_C"]], "merge_agg_feats() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.merge_agg_feats"]], "merge_cutoff_feats() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.merge_cutoff_feats"]], "merge_feats() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.merge_feats"]], "mode() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.mode"]], "purpose() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.purpose"]], "remaining_days() (in module spai.utils.kpi.cost)": [[24, "spai.utils.kpi.cost.remaining_days"]], "safe_div() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.safe_div"]], "spai.utils.kpi": [[24, "module-spai.utils.kpi"]], "spai.utils.kpi.cost": [[24, "module-spai.utils.kpi.cost"]], "spai.utils.kpi.kpi": [[24, "module-spai.utils.kpi.kpi"]], "target_cost() (in module spai.utils.kpi.cost)": [[24, "spai.utils.kpi.cost.target_cost"]], "target_kpi() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.target_kpi"]], "target_kpi_value() (in module spai.utils.kpi.kpi)": [[24, "spai.utils.kpi.kpi.target_kpi_value"]], "used_cost() (in module spai.utils.kpi.cost)": [[24, "spai.utils.kpi.cost.used_cost"]]}})