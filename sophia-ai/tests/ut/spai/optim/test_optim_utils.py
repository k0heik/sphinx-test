import pytest
import numpy as np
from spai.optim.utils import clip, weighted_ma


def test_clip():
    assert clip(0.0, 0.0, 0.0) == pytest.approx(0.0)
    assert clip(-2.5, 0.0, 3.0) == pytest.approx(0.0)
    assert clip(-3.42, None, 3.0) == pytest.approx(-3.42)
    assert clip(3.42, 0.0, None) == pytest.approx(3.42)


def test_weighted_ma():
    x = np.array([1.0, 2.0, 1.5, 2.5, 3.5])
    y = weighted_ma(x, 1)
    assert all([x[i] == pytest.approx(y[i])
                for i in range(len(x))])
    y = weighted_ma(x, 2)
    y_true = [1.0, 1.5, 1.75, 2.0, 3.0]
    assert all([y_true[i] == pytest.approx(y[i])
                for i in range(len(x))])

    x = np.array([98, 92, 110, 86, 90, 81, 95, 105, 91, 79, 90, 74, 90,
                  95, 97, 107, 81, 77, 85, 84, 90, 78, 72, 83, 79, 80,
                  68, 64, 68, 59, 66, 74, 65, 77, 69, 67, 62, 60, 49,
                  48, 78, 65, 59, 66, 50, 58, 76, 55, 53, 47, 52, 46,
                  46, 54, 35, 55, 46, 39, 42, 45, 38, 37, 31, 36, 33,
                  27, 30, 35, 26, 30, 35, 35, 29, 23, 22, 21, 24, 19,
                  18, 16, 22, 15, 12, 24, 16, 14, 14, 15, 9, 13, 13,
                  6, 7, 0, 3, 4, 2, 1, 3, 0]).astype(float)
    y_true = [98.0,
              95.0,
              100.025,
              96.5142857142857,
              95.06976744186046,
              92.5328947368421,
              92.83908045977012,
              94.52307692307694,
              94.12558139534883,
              92.36324786324785,
              92.04365079365081,
              90.2081784386617,
              90.10175438596491,
              90.50999999999999,
              91.05414012738854,
              92.36697247706421,
              91.49852507374631,
              90.33428571428571,
              89.8638888888889,
              89.37940379403794,
              89.3580901856764,
              88.50781249999999,
              87.26666666666667,
              86.83544303797468,
              86.18045112781957,
              85.61194029850746,
              84.26485148514851,
              82.6716049382716,
              81.3851851851852,
              79.58271604938273,
              78.30617283950617,
              77.68888888888888,
              76.52098765432099,
              76.19259259259258,
              75.37037037037038,
              74.45925925925926,
              73.3037037037037,
              72.07407407407408,
              70.15308641975307,
              68.23950617283951,
              68.38765432098765,
              67.77283950617283,
              66.8,
              66.37283950617284,
              64.99753086419753,
              64.19259259259259,
              64.65432098765432,
              63.78271604938272,
              62.79753086419753,
              61.49876543209876,
              60.595061728395066,
              59.353086419753076,
              58.18765432098765,
              57.63703703703704,
              55.903703703703705,
              55.538271604938274,
              54.64444444444443,
              53.316049382716045,
              52.21975308641975,
              51.39012345679012,
              50.172839506172835,
              48.93827160493827,
              47.39999999999999,
              46.27407407407408,
              45.03703703703704,
              43.4641975308642,
              42.15802469135803,
              41.239506172839505,
              39.76543209876544,
              38.66419753086419,
              37.992592592592594,
              37.39259259259259,
              36.46913580246913,
              35.18271604938271,
              33.901234567901234,
              32.68395061728395,
              31.74814814814815,
              30.558024691358025,
              29.358024691358022,
              28.106172839506176,
              27.323456790123455,
              26.14814814814815,
              24.85185185185185,
              24.404938271604937,
              23.530864197530864,
              22.577777777777776,
              21.68148148148148,
              20.920987654320985,
              19.837037037037035,
              19.076543209876544,
              18.385185185185186,
              17.271604938271604,
              16.28148148148148,
              14.891358024691357,
              13.750617283950614,
              12.750617283950618,
              11.696296296296294,
              10.629629629629628,
              9.765432098765432,
              8.785185185185185]
    y = weighted_ma(x, 28)
    assert all([y_true[i] == pytest.approx(y[i])
                for i in range(len(x))])
